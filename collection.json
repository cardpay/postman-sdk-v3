{
  "collection": {
    "info": {
      "_postman_id": "9dacc77f-6ab0-4094-82b5-d6b2db8b4045",
      "name": "Unlimint REST API (3.0)",
      "description": "## Installation\n\n1.  Install Postman 8.5+\n2.  Download and import [collection file](https://raw.githubusercontent.com/cardpay/postman-sdk-v3/master/collection.json)\n3.  Download and import [environment file](https://raw.githubusercontent.com/cardpay/postman-sdk-v3/master/sandbox.json)\n    \n\n## API usage\n\nExecute any section from Postman collection  \nFor more information about API v3 please visit [documentation web-site](https://integration.unlimint.com).\n\n## Notes\n\n*   constants ('UNLIMINT_API_URL', 'PAYMENTPAGE_TERMINAL_CODE' and so on) are [Postman environment variables](https://learning.postman.com/docs/postman/variables-and-environments/variables/), defined for 'sandbox' environment.\n*   following variables are defined for collection scope *(click 'Edit' button on 'unlimint-api' collection and see 'Pre-request Script' section)*:\n    *   request_name — name of the test that is being executed, using for 'merchant_order.description' field value, in request's 'Body' section\n    *   expiration — customer's card expiration date, using for 'card_account.card.expiration' field value, in gateway request 'Body' section. Format: mm/yyyy\n    *   tokens — variable with 'obtain' function which is calling in order to get API authorization tokens\n*   other variables ('{{payment_id_to_complete}}', '{{payment_id_to_reverse}}', etc) are defined in 'Pre-request Script' and 'Tests' sections for particular request.",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "name": "Authorization",
        "item": [
          {
            "name": "Get authorization tokens",
            "item": [
              {
                "name": "Get authorization token",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314e8d52-3bdb-4060-89bf-372383fa3580",
                      "exec": [
                        "pm.test(\"Successful response\", function () {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('access_token');",
                        "    pm.expect(response).to.have.property('refresh_token');",
                        "    pm.expect(response).to.have.property('expires_in');",
                        "    pm.expect(response).to.have.property('refresh_expires_in');",
                        "",
                        "    pm.variables.set('access_token', response.access_token);",
                        "    pm.variables.set('refresh_token', response.refresh_token);",
                        "});",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "3b68b374-66af-428b-ab8e-460995fdadda",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "key": "grant_type",
                        "type": "text",
                        "value": "password"
                      },
                      {
                        "key": "terminal_code",
                        "type": "text",
                        "value": "{{PAYMENTPAGE_TERMINAL_CODE}}"
                      },
                      {
                        "key": "password",
                        "type": "text",
                        "value": "{{PAYMENTPAGE_PASSWORD}}"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/auth/token",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "auth",
                      "token"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "5a911af1-67d8-4e65-84fe-3a5a2981dce3",
            "description": "Get authorization tokens for every transaction request\n------------------------------------------------------\n\n* In order to perform any API call the access token must be obtained.\n* To do this Merchant needs to send POST request to the API token endpoint.\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values.\n* After receiving access token (one from the pair) merchant should use in one create, update or get transaction information request\n* Merchant can receiving new pair of tokens (access and refresh tokens) for every transaction request and don't use refresh token for tokens pair refreshing\n\n\nGet authorization tokens for more than one request \n------------------------------------------------------\n\n* After receiving access token merchant can save access and refresh tokens in his site\n* Merchant can use this pair of tokens for more than one transaction request\n* After lifetime of access token is ended, merchant can use refresh token for refreshing (getting new pair) tokens (see more in Refresh token case below)\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7f9958e-12d4-402d-a882-f91ae5240913",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1acdc298-866c-4718-a368-85ace73fcaf6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Refresh token",
            "item": [
              {
                "name": "Refresh authorization token",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314e8d52-3bdb-4060-89bf-372383fa3580",
                      "exec": [
                        "pm.test(\"Successful response\", function () {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('access_token');",
                        "    pm.expect(response).to.have.property('refresh_token');",
                        "    pm.expect(response).to.have.property('expires_in');",
                        "    pm.expect(response).to.have.property('refresh_expires_in');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "069f13dd-0cff-4933-aebc-84bc78c21d94",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "key": "grant_type",
                        "value": "refresh_token",
                        "type": "text"
                      },
                      {
                        "key": "refresh_token",
                        "value": "{{refresh_token}}",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/auth/token",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "auth",
                      "token"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "c11d34db-2fae-49b7-9030-9439077cb9a0",
            "description": "* Merchant can send a POST request to the **/api/auth/token** endpoint and specify refresh token as a request param.\n* A result of this request will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens (see 'Get authorization token' use case)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "005d34ea-e534-4469-a4df-875ae55f42d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73326d37-505a-4bf3-a2be-b072beaa9d25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get authorization tokens for more than one request",
            "item": [
              {
                "name": "Create pre-authorized payment (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        "pm.variables.set('request_time', new Date());",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.variables.set('payment_id_to_complete', response.payment_data.id);",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "",
                        "    postman.setNextRequest('Get payment by payment id (reusable tokens)');",
                        "});",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "c2d5e886-ee54-4082-ba6a-96f900bf82df",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by payment id (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.variables.get('payment_id_to_complete'));",
                        "    ",
                        "    postman.setNextRequest('Complete pre-authorized payment (reusable tokens)');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "8282175e-95a1-4230-bbf6-de753cd9c78e",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized payment (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "pm.variables.set(\"request_time\", new Date());",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('COMPLETED');",
                        "    ",
                        "    postman.setNextRequest('Get payment by payment id again (reusable tokens)');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "986121c2-35b5-44d9-a7b5-98002854c737",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by payment id again (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.variables.get('payment_id_to_complete'));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "aaa816f3-293c-4292-aff9-cd51045827fb",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "8e28010f-1876-480b-a41d-cb286c358b5d",
            "description": "* After receiving access token merchant can save access and refresh tokens on his side\n* Merchant can use this pair of tokens for more than one transaction request\n* After lifetime of access token is ended, merchant can use refresh token for refreshing (getting new pair) tokens (see more in Refresh token case below)\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values\n* See 'Pre-request Scripts' section for 'reusable_tokens' function",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60896a63-8e79-4f8e-be7e-4592f36e79db",
                  "type": "text/javascript",
                  "exec": [
                    "pm.collectionVariables.set('reusable_tokens', '(' + function () {",
                    "    return {",
                    "        obtain: function (terminal_code, password) {",
                    "            var moment = require('moment');",
                    "            var TOKEN_MIN_VALIDITY = 100;",
                    "            var unlimint_api_url = pm.environment.get('UNLIMINT_API_URL');",
                    "",
                    "            function unsetVar(name) {",
                    "                pm.collectionVariables.unset(`${name}_${terminal_code}`);",
                    "            }",
                    "",
                    "            function setVar(name, value) {",
                    "                pm.collectionVariables.set(`${name}_${terminal_code}`, value);",
                    "            }",
                    "",
                    "            function getVar(name, defValue) {",
                    "                return pm.collectionVariables.get(`${name}_${terminal_code}`) || defValue;",
                    "            }",
                    "",
                    "            var now = moment().unix();",
                    "            var expires_in = getVar('expires_in', 0);",
                    "            var refresh_expires_in = getVar('refresh_expires_in', 0);",
                    "",
                    "            if (expires_in - now >= TOKEN_MIN_VALIDITY && getVar('access_token')) {",
                    "                setVar('access_token', getVar('access_token'));",
                    "",
                    "            } else {",
                    "                var refresh_token = getVar('refresh_token');",
                    "                var request_body = `grant_type=refresh_token&refresh_token=${refresh_token}`;",
                    "",
                    "                if (refresh_expires_in - now < TOKEN_MIN_VALIDITY || !refresh_token) {",
                    "                    request_body = `grant_type=password&terminal_code=${terminal_code}&password=${password}`;",
                    "                }",
                    "",
                    "                unsetVar('access_token');",
                    "                unsetVar('refresh_token');",
                    "                unsetVar('expires_in');",
                    "                unsetVar('refresh_expires_in');",
                    "",
                    "                pm.sendRequest({",
                    "                    url: `${unlimint_api_url}/api/auth/token`,",
                    "                    method: 'POST',",
                    "                    header: 'Content-Type:application/x-www-form-urlencoded',",
                    "                    body: {",
                    "                        mode: 'raw',",
                    "                        raw: request_body",
                    "                    }",
                    "",
                    "                }, (err, res) => {",
                    "                    if (err || res.code !== 200) {",
                    "                        throw new Error('Authentication Error');",
                    "                    }",
                    "",
                    "                    var response = res.json();",
                    "                    setVar('access_token', response.access_token);",
                    "                    setVar('refresh_token', response.refresh_token);",
                    "                    setVar('expires_in', response.expires_in + moment().unix());",
                    "                    setVar('refresh_expires_in', response.refresh_expires_in + moment().unix());",
                    "                });",
                    "            }",
                    "        }",
                    "    }",
                    "} + ')();');"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c1b10bf-cdab-48a1-9b48-a52b12b58cc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "id": "64d20de6-aa14-47d8-afed-7fb6a081ed64",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dca43975-b22d-4c11-8cff-d6e6d1c32156",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7f8f114-607b-495c-b2d8-7a99e1d32e60",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Payments",
        "item": [
          {
            "name": "Create payment (payment page)",
            "item": [
              {
                "name": "Create payment (payment page)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "29f69290-ec01-4d4a-9e23-668a504cd943",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "value": "application/json",
                      "type": "text"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "81c3e32e-c1a2-4da8-848d-d464f30e450f",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* Card data is filled in by customer on hosted payment page (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20e4a197-c406-484a-9dcc-6ab892e6fd00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6d8aab9-b803-42a5-82b2-3f4ac387c522",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create payment without 3-D Secure 1",
            "item": [
              {
                "name": "Create payment (without 3-D Secure 1, gateway)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a737f33-73ea-48bc-ba71-777ea36cfd52",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a6d3d9-c006-4c18-9f98-b5d8e6f48278",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "bc1b323e-2348-4f7a-bbc9-2bcd88ed5cfd",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "81c5b360-c274-4dbd-a8b6-b287a3536c49",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13f56bb0-9613-4614-b500-049faedefad5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8fe7f5e4-9aa5-45f0-83f5-226d5a14878e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create payment with 3-D Secure 1",
            "item": [
              {
                "name": "Create payment (with 3-D Secure 1, gateway)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    // emulate customer behaviour, performing GET request to redirect url",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "bf1356b2-cfe6-43ab-9684-cc7ddaf9d3f9",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "cbfd235c-25da-4841-b435-0eb426a7c9f0",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* The results of 3-D Secure 1 verification depend on the card provided in request and can be received only after customer redirects to redirect URL and passes 3-D Secure (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "91607437-55d6-4ecf-9681-f1b56da6d177",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26470c9d-88fe-40ce-9554-c64fab4ac08d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create payment with 3-D Secure 2",
            "item": [
              {
                "name": "Create payment (3-D Secure 2)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "    ",
                        "    var response = pm.response.json()",
                        "    pm.expect(response).to.have.property('redirect_url')",
                        "})",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "b906990a-475b-4e04-b259-6e908c3de51a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"trans_type\": \"01\"\n    },\n    \"card_account\": {\n        \"acct_type\": \"01\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"+1 123456789\",\n        \"work_phone\": \"+1 987654321\",\n        \"home_phone\": \"+1 462526747\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "097c5249-db40-4f21-9cdc-4c726d86ebcf",
            "description": "* Merchant makes POST request in JSON format (with list of special 3-D Secure 2 parameters in request) to endpoint **/api/payments** to create new payment \n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* The results of 3-D Secure 2 verification depend on the card provided in request and can be received only after customer redirects to redirect URL and passes 3-D Secure (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e605fe1-bb9e-485a-805b-5cd873d597a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "106c57f8-f356-4435-95e4-48ece27ca261",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create AVS payment",
            "item": [
              {
                "name": "Create payment (AVS)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('AVS_PAYMENTPAGE_TERMINAL_CODE');",
                        "var password = pm.environment.get('AVS_PAYMENTPAGE_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "81adffc1-1831-4570-aae6-612446c8098d",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"authentication_request\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "91cff8c6-c7f5-4d60-9df4-cf7cbb89d870",
            "description": "* AVS request possibility in wallet should be enabled with special custom 3-D Secure mode by Unlimint support\n* Merchant makes POST request in JSON format to api/payments endpoint  to create new AVS request (address verification request - for UK and US billing addresses), see more in '[Address verification](https://integration.unlimint.com/#payments)' section\n* AVS request is created in the system and redirect URL is returned to merchant in JSON format (payment page URL)\n* Customer fill in the customer data (card data and billing address for this card) on the AVS payment page and if data is correct directs to Result page\n* Merchant also gets card.token in callback and response for card from payment page if request had a parameter \"payment_data.generate_token\"\n* In error case (case of error response of AVS service or other errors) merchant gets DECLINED status of transaction in callback in JSON format, using method POST\n* To get full information about created AVS request merchant receives callback",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87804382-770d-4492-83c2-81dab7291559",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc2d746e-2eac-43ac-8e79-805c1dc72e92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Reverse payment (void)",
            "item": [
              {
                "name": "Create pre-authorized payment to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.variables.set('payment_id_to_reverse', response.payment_data.id);",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Reverse pre-authorized payment');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "05cd4d2f-e170-4611-8675-caf65517ab83",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_reverse')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    ",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('VOIDED');",
                        "})"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "1de5f405-61b1-4655-b02e-f918353fd6dc",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"REVERSE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "c7aa89c6-a56e-4351-b258-5b076bf5f86b",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Merchant receives callback with transaction result information (with payment id)\n* Merchant makes PATCH request in JSON format with payment id and payment_data.status_to='REVERSE' to **/api/payments/{payment_id}** to reverse (void) payment, [see more](https://integration.unlimint.com/#updatePayment).",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1a53af0-7d38-465b-80f0-a25419c94891",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43b0f2b0-4064-4087-8e4c-d27030efdada",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create pre-authorised payment",
            "item": [
              {
                "name": "Create pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.variables.set('payment_id_to_complete', response.payment_data.id);",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "",
                        "    postman.setNextRequest('Complete pre-authorized payment');",
                        "});",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "4684e59c-91db-4af5-b7a2-a90d99339e82",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('COMPLETED');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "85eae7aa-c83b-4368-86f2-3da20ab4e027",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "baff63e4-9602-4c8d-b3c9-36698f34b58e",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment with parameter preauth='true', [see more](https://integration.unlimint.com/#createPayment)\n* Preauth authorization payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page with provided URL\n* Merchant can complete or reverse (void) preauthorized payment using PATCH request in JSON format with payment id and payment_data.status_to='REVERSE' or \"COMPLETE\" to **/api/payments/{payment_id}**\n* Merchant receives response with update payment result information (status='VOIDED' or 'COMPLETED')\n* If merchant doesn't send complete or reverse request ([see more](https://integration.unlimint.com/#updatePayment)) payment will be completed automatically in 7 calendar days\n* Amount in completion update request can be less or more than preauthorized amount in first request   ",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c536ffe9-2810-43c0-ba46-993772db7dc6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d7c5e79-37cf-4fa0-8976-73ee849956b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create payment with card token",
            "item": [
              {
                "name": "Create payment with card tokenization",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.variables.set('payment_id_for_card_token', response.payment_data.id);",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Get payment by id for card token');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "cc9b9227-66e5-4d30-a502-771809f2e3be",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"generate_token\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by id for card token",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_for_card_token')).to.not.be.undefined;",
                        "",
                        "postman.setNextRequest('Create payment with card token');"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e6821d7-7359-445c-8f57-76dbe0793aba",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('card_account');",
                        "    pm.expect(response.card_account).to.have.property('token');",
                        "    pm.variables.set('card_token', response.card_account.token);",
                        "    ",
                        "    postman.setNextRequest('Create payment with card token');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "90b2b1ef-7ade-4524-a18f-a83f5929243c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_for_card_token}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_for_card_token}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create payment with card token",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.variables.get('card_token')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "   ",
                        "    postman.setNextRequest('Get payment by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "af92f8df-9cbf-4cec-bbfe-9494bdd65775",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"token\": \"{{card_token}}\",\n        \"card\": {\n        \t\"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "e078af7b-e4e7-4bff-9842-36bf0d4cb4e8",
            "description": "* Merchant makes POST request in JSON format (with payment_data.generate_token parameter in request) to endpoint **/api/payments** to create new payment with card tokenization\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page (Unlimint or Merchant site) with provided URL\n* After successful transaction merchant can use card token (from callback) in the next transactions",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88499585-c829-4c9b-bea2-26e59182a1ae",
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "df65aaf2-fe32-4e6d-9040-6d7e29f50835",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get payments list",
            "item": [
              {
                "name": "Get payment by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_merchant_order_id')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "654f927d-f5c6-46fb-9754-b6375500bba7",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    ",
                        "    pm.variables.set('last_payment_id', response.data[0].payment_data.id);",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "e2cbd15c-b126-431e-ba9a-883dc1718ac6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payments information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee62cff-8ea2-4f65-8f5f-8d0398844f22",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922767d3-ad8a-4d08-8f8d-8f43445739d6",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "24e00a26-466e-4ae2-af83-4241124571c7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "1322dcfc-c7ca-4861-b62c-f211b2c19fbb",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payments) to get information about payments list, [see more](https://integration.unlimint.com/#getPayments)\n* Merchant receives GET response about transactions (payments list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d26a8a7-81c1-4ff2-a758-efdbc307022c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08ee680e-b574-45d8-b4b1-4fdf968e67fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get payment by payment id",
            "item": [
              {
                "name": "Get payment by payment id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_payment_id')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.variables.get('last_payment_id'));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "f7bfb26b-b6e0-4d73-99cc-f65911be8950",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{last_payment_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{last_payment_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "d042ed02-637e-4004-b228-41a200cd768c",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payments/{payment_id}) for getting information about payment by payment id, [see more](https://integration.unlimint.com/#getPayment)\n* Merchant receives GET response about transaction (payment) result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9569610-1c88-4814-9111-8e11823128dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf4ebe93-e3bb-4311-969f-c2f295400fa5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create Installment payment (one-phase)",
            "item": [
              {
                "name": "Create Issuer Financed Installment payment (one-phase)",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "    \r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "d2aa199d-2f42-4d0a-a3f1-c0cbabf3bf77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "40a6dda6-2c90-46d0-82c3-8f5895242873"
                    }
                  }
                ],
                "id": "8f45b46a-ef4f-43dd-8196-3535fa9f6a7b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"installment_type\": \"IF\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create Merchant Financed Installment payment (one-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "ea42525e-5344-4d9c-bacb-89d28584b536"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "    \r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "7f68ec4d-7d1e-4fa7-b120-077e94618f9f"
                    }
                  }
                ],
                "id": "e279aefd-273b-4706-ac52-79e30da7d944",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"installment_type\": \"MF_HOLD\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "8cff055c-b742-44cf-ab99-5f3f4564d1a0",
            "description": "Merchant makes POST request in JSON format to endpoint **/api/payments** to create new Installment payment (one-phase), [see more](https://integration.unlimint.com/#createPayment).\n\n**How to create Installment payment:**\n\n*   Make POST-request\n*   Click on 3DS redirect URL from response message\n*   Emulate successful 3DS validation\n    \n\nAfter successful 3DS validation payment will be completed"
          },
          {
            "name": "Create Installment payment (two-phase)",
            "item": [
              {
                "name": "Create Merchant Financed Installment payment (two-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ec24e7d-2e2a-47fa-aa0f-8b2e70491e19",
                      "exec": [
                        "var uuid = require('uuid');\r",
                        "\r",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);\r",
                        "\r",
                        "var merchant_order_id = uuid.v4();\r",
                        "pm.variables.set('merchant_order_id', merchant_order_id);\r",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ede38aab-d954-4f5f-b4c7-6b37d40d1192",
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "\r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "    \r",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;\r",
                        "    pm.collectionVariables.set('payment_id_to_update', response.payment_data.id);\r",
                        "    \r",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {\r",
                        "        pm.expect(response_after_redirect.code).to.equal(200);\r",
                        "    });\r",
                        "    \r",
                        "    postman.setNextRequest('Update Merchant Financed Installment payment (two-phase)');\r",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "50436e6f-2217-4094-b751-3c3d91144e4b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"preauth\": true,\r\n        \"installment_type\": \"MF_HOLD\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Update Merchant Financed Installment payment (two-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86e54857-3e99-4e71-9075-876a834ae45b",
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_update')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed793274-46d1-46d6-9fef-2dcd102e8e15",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    ",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('AUTHORIZED');",
                        "})"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "2d77ae3c-9330-48d0-886c-1d9b87bcb029",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_update}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_update}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "2edfae9e-e1e8-4b1c-95ac-1ab96de985d6",
            "description": "*   Merchant makes POST request in JSON format to endpoint **/api/payments** to create new Installment payment (two-phase), [see more](https://integration.unlimint.com/#createPayment).\n    \n\n**How to create two-phase Installment payment:**\n\n*   Make POST-request\n*   Click on 3DS redirect URL from response message\n*   Emulate successful 3DS validation\n*   Make PATСH-request to update (complete) Installment payment\n    \n\n**Important:** in POST-request non-3DS card is used. These settings are relevant only for the test collection (due to Sandbox features) - real Installment payments can be created only for cards with 3DS enabled"
          }
        ],
        "id": "c6115f17-6ffc-4e36-88b4-f8a163e39d4b",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d080d245-fa4f-4e4d-bf71-d01710bc534c",
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('PAYMENTPAGE_TERMINAL_CODE');",
                "var password = pm.environment.get('PAYMENTPAGE_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "451bbc2b-1aa5-4f36-a461-d4466e5e50e4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Refunds",
        "item": [
          {
            "name": "Create refund",
            "item": [
              {
                "name": "Create payment for refund",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea48a44e-3cae-4252-8ee3-98accc06f910",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    pm.variables.set('payment_id_for_refund', response.payment_data.id);",
                        "    ",
                        "    postman.setNextRequest('Create refund');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f62dea6c-e2d8-406c-bb11-dc1954d52f2d",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "efa56cbd-f81e-45e9-ab99-318a3a9491ab",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.variables.get('payment_id_for_refund')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    ",
                        "    pm.variables.set('last_refund_id', response.refund_data.id);",
                        "    ",
                        "    postman.setNextRequest('Get refund by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "a1234383-ebe4-4782-a7c0-b06405cdbcb3",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_data\": {\n        \"id\": \"{{payment_id_for_refund}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "46fe3f2c-a60c-4fbc-bcf0-9b2544c6727c",
            "description": "* Merchant makes POST request in JSON format to create new refund to endpoint **/api/refunds**, [see more](https://integration.unlimint.com/#createRefund)\n* Merchant can create new refund only after successfully creation of payment or recurring payment\n* Merchant must have payment id (or recurring id) and send it in refund request\n* Merchant receives response with created transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "387eda76-f1da-46e5-bc0b-94bfdf25115b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca40a12c-3d75-4be9-9ad8-3144f72ec8fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get refunds list",
            "item": [
              {
                "name": "Get refund by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "654f927d-f5c6-46fb-9754-b6375500bba7",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    ",
                        "    pm.variables.set('last_refund_id', response.data[0].refund_data.id);",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "ae2ca3b8-5ab0-4dfd-baa8-4833661437bb",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get refunds information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee62cff-8ea2-4f65-8f5f-8d0398844f22",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922767d3-ad8a-4d08-8f8d-8f43445739d6",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "5015b788-2843-47b8-9626-9e70c65ba466",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "95fa518c-87ba-4609-b44a-f2e49b919d64",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/refunds) to get information about refunds list, [see more](https://integration.unlimint.com/#getRefunds)\n* Merchant receives GET response about transactions (refunds list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f76ddfb-16d4-458b-b03c-bc3da5f88d54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b3d16d72-ad3a-4e94-a5ef-5f3c954e5225",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get refund by refund id",
            "item": [
              {
                "name": "Get refund by refund id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_refund_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('refund_data');",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    pm.expect(response.refund_data.id).to.equal(pm.variables.get('last_refund_id'));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "57ab0599-f418-47df-b62c-9845cf2f25f0",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/{{last_refund_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      "{{last_refund_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "2b83303d-9c8b-4ebf-9e96-37a90ef1e5d1",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/refunds/{refund_id}) to get information about refund by refund id, [see more](https://integration.unlimint.com/#getRefund)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c9290be-d8f2-445c-8553-7f3129b2c1a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d02a8b05-ee6b-4c18-8ff7-cbfd184cf40d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Reverse refund (void)",
            "item": [
              {
                "name": "Create payment for reversed refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    pm.variables.set('payment_id_for_reversed_refund', response.payment_data.id);",
                        "    ",
                        "    postman.setNextRequest('Create refund to reverse');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "34c33fe4-2cf3-49d3-8fb5-81434bd2581b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create refund to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_for_reversed_refund')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Request success\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    ",
                        "    pm.variables.set('refund_id_to_reverse', response.refund_data.id);",
                        "    ",
                        "    postman.setNextRequest('Reverse refund');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "352fff90-4ed0-4552-a03f-7c1d31cf8849",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_data\": {\n        \"id\": \"{{payment_id_for_reversed_refund}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('refund_id_to_reverse')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    pm.expect(response.refund_data).to.have.property('status');",
                        "    pm.expect(response.refund_data.status).to.equal('VOIDED');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "d86c7199-4030-4372-bbf7-cc3608b422de",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"refund_data\": {\n        \"status_to\": \"REVERSE\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/{{refund_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      "{{refund_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "fc319423-b2cb-43ff-a08d-d004dab7e408",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/refunds** to create new refund, [see more](https://integration.unlimint.com/#createRefund)\n* Merchant makes PATCH request in JSON format with refund id and refund_data.status_to='REVERSE' to **/api/refunds/{refund_id}** for reverse (void) refund - refund void possibility must be enabled by Unlimint manager, [see more](https://integration.unlimint.com/#updateRefund)\n* Merchant receives response with update result information (status='VOIDED')",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0f94c80-8ff9-4cb6-81e7-387a14174bbc",
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e05531f-ed81-4f9d-8b33-817a328d7a11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "id": "39cb182f-0d6a-4d97-98bf-21989f713b57",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2adc25dc-4c14-4555-81fc-90a449e2ab7e",
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30a2c9c0-cf14-498b-810b-f92ff69549f3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Payouts",
        "item": [
          {
            "name": "Create payout",
            "item": [
              {
                "name": "Create payout",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    ",
                        "    pm.variables.set('last_payout_id', response.payout_data.id);",
                        "    ",
                        "    postman.setNextRequest('Get payout by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "752d4262-3146-4a93-b685-5377c988640c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payout_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"expiration\": \"{{expiration}}\"\n        },\n        \"recipient_info\": \"{{$randomUUID}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "09c4d343-cd62-4188-9c92-e6f24294b620",
            "description": "* Merchant makes POST request in JSON format to create new payout to endpoint (/api/payouts), [see more](https://integration.unlimint.com/#createPayout)\n* Merchant receives response with transaction (payout) result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48ef339d-1e15-4b4c-b454-3b79661ce793",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "023b6af0-5886-4b64-b76f-f19fb466522f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get payouts list",
            "item": [
              {
                "name": "Get payout by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "654f927d-f5c6-46fb-9754-b6375500bba7",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.variables.set('last_payout_id', response.data[0].payout_data.id);",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "5c40333a-b243-44ea-a13c-27c727dd5bba",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payouts information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee62cff-8ea2-4f65-8f5f-8d0398844f22",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922767d3-ad8a-4d08-8f8d-8f43445739d6",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "94383321-ea67-4d09-8c0b-6ba3b34a459d",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "5aa59ff6-df38-4445-b970-5ecfe969062b",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payouts) to get information about payouts, [see more](https://integration.unlimint.com/#getPayout)\n* Merchant receives GET response about transactions (payouts list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a3614766-e828-4199-94da-361fd250b9ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8aa4201d-af6e-4775-831a-1d96e3eb2958",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get payout by payout id",
            "item": [
              {
                "name": "Get payout by payout id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_payout_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payout_data');",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    pm.expect(response.payout_data.id).to.equal(pm.variables.get('last_payout_id'));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "2f1bcc76-f7f1-4369-9664-ad06b1c52bf8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/{{last_payout_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      "{{last_payout_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "dd96727b-e510-4332-a294-9b5951739dce",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payouts/{payout_id}) to get information about payout by payout id, [see more](https://integration.unlimint.com/#getPayout)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14b124ad-8a42-4443-84fa-88bbe00e65fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ebc60c1-09ff-4232-b22a-0e0a7784c6f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Reverse payout (void)",
            "item": [
              {
                "name": "Create payout to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Request success\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    ",
                        "    pm.variables.set('payout_id_to_reverse', response.payout_data.id);",
                        "    ",
                        "    postman.setNextRequest('Reverse payout');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "c19b3fcd-e8b7-4760-b5e2-159d818292a8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payout_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        },\n        \"recipient_info\": \"{{$randomUUID}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse payout",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('payout_id_to_reverse')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    pm.expect(response.payout_data).to.have.property('status');",
                        "    pm.expect(response.payout_data.status).to.equal('VOIDED');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "8ea95a67-6271-45e5-9983-81e32084f42f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"payout_data\": {\n        \"status_to\": \"REVERSE\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/{{payout_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      "{{payout_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "ea479a49-d8b6-4a49-af5b-2a7feb8c1899",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payouts** to create new payout, [see more](https://integration.unlimint.com/#createPayout)\n* Merchant receives callback with transaction result information (with payout id)\n* Merchant makes PATCH request in JSON format with payout id and payout_data.status_to='REVERSE' to **/api/payouts/{payout_id}** for reverse (void) payout - payout void possibility must be enabled by Unlimint manager, [see more](https://integration.unlimint.com/#updatePayout)\n* Merchant receives response with update result information (status='VOIDED')",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71e0e542-ccf1-4888-9127-c5ae75fbdee3",
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29d3a2c6-28e4-4496-a551-b56ea5595333",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "id": "bdd5f0b2-b7a0-4de6-bf00-bb8e91bf77e6",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "718c66ea-ef27-42c9-bbd3-09af10758595",
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc6903a0-8c48-49a2-a6cd-71325f5d0811",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Recurrings",
        "item": [
          {
            "name": "Create one-click payment",
            "item": [
              {
                "name": "Create one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.variables.set('last_recurring_one_click_id', response.recurring_data.id);",
                        "    postman.setNextRequest('Get recurring by first recurring id');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "a5a31963-8e76-4475-be01-595c5ad3afc6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "7da31a5f-208f-4037-9912-7300a29c56b8",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** ([see more](https://integration.unlimint.com/#createRecurring)) to create new one-click payment (with 'initiator'='cit' in request) with card tokenization for recurrent payments\n* One-click payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page (Unlimint or Merchant site) with provided URL\n* Merchant can use filing.id (from the callback or get response) in the next one-click transactions using saved (tokenized) card",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab9a9dbd-c1a7-48c0-806c-f40e1ee32e15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab24fa15-583c-4eaa-acbd-de1b2b2e8bd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create next one-click payment",
            "item": [
              {
                "name": "Get recurring by first recurring id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_recurring_one_click_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    pm.expect(response.recurring_data.id).to.equal(pm.variables.get('last_recurring_one_click_id'));",
                        "    ",
                        "    pm.expect(response.recurring_data).to.have.property('filing');",
                        "    pm.expect(response.recurring_data.filing).to.have.property('id');",
                        "    ",
                        "    pm.variables.set('last_filing_id', response.recurring_data.filing.id);",
                        "    ",
                        "    postman.setNextRequest('Create next one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "b4c8771c-098b-4ebb-8d5f-4057c26003da",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{last_recurring_one_click_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{last_recurring_one_click_id}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create next one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.variables.get('last_filing_id')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    ",
                        "    pm.expect(response.recurring_data).to.have.property('filing');",
                        "    pm.expect(response.recurring_data.filing).to.have.property('id');",
                        "    ",
                        "    pm.expect(response.recurring_data.filing.id).to.equal(pm.variables.get('last_filing_id'));",
                        "",
                        "    // emulate customer behaviour, performing GET request to redirect url",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Get recurring by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "1db9af6b-1662-4205-b678-863d7dd6d25a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"filing\": {\n            \"id\": \"{{last_filing_id}}\"\n        }\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "7742176a-442f-4a36-9125-8a683c414e9a",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings**, to create new one-click payment (with 'initiator'='cit', filing.id from previous one-click in request) \n* Upon authentication completion, one-click payment is processed. Customer gets payment result page (redirect URL)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "121b94e4-ffdf-4f9a-9166-6d2b0506f534",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "42e58dc4-95d4-4d6e-91e7-a353ff866744",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get recurring payments list",
            "item": [
              {
                "name": "Get recurring by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "654f927d-f5c6-46fb-9754-b6375500bba7",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.variables.set('last_recurring_id', response.data[0].recurring_data.id);",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "e0be6fad-5326-4366-a82f-7c787110d129",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get recurrings information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee62cff-8ea2-4f65-8f5f-8d0398844f22",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922767d3-ad8a-4d08-8f8d-8f43445739d6",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "4b55662b-8863-4675-9781-878d22ae2967",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "70a52bfd-cadd-4729-ad91-38273010f99a",
            "description": "* Merchant makes GET request in JSON format to endpoint **/api/recurrings** to get information about payments list, [see more](https://integration.unlimint.com/#getRecurrings)\n* Merchant receives GET response about transactions (recurrings list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf1ce099-1d51-41d6-8194-82a3e49b3cc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d8619f04-604a-428c-8106-acd82694a345",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Get recurring payment by recurring id",
            "item": [
              {
                "name": "Get recurring by recurring id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f236ea-e00b-4ea1-9d57-7e2a4ae4c749",
                      "exec": [
                        "pm.expect(pm.variables.get('last_recurring_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5a7dc4b-2f7f-4d18-9122-e739bbaf6c97",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    pm.expect(response.recurring_data.id).to.equal(pm.variables.get('last_recurring_one_click_id'));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "dc6746c1-31ef-477f-8ea6-91444176339d",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{last_recurring_one_click_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{last_recurring_one_click_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "7389a13f-730c-4c25-b9fb-606d584d1a60",
            "description": "* Merchant makes GET request in JSON format to endpoint **/api/recurrings/{recurring_id}** to get information about one-click payment by recurring id, [see more](https://integration.unlimint.com/#getRecurring)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e667e71-6ca8-4eff-a752-43742e10b0e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c83c023-3678-4ce6-b965-fc698720a976",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Create pre-authorized one-click payment",
            "item": [
              {
                "name": "Create pre-authorized one-click payment to complete",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.variables.set('recurring_one_click_id_to_complete', response.recurring_data.id);",
                        "    postman.setNextRequest('Complete pre-authorized one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "252d42a1-8ae9-4125-868d-1822fdcb7ec4",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('recurring_one_click_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('status');",
                        "    pm.expect(response.recurring_data.status).to.equal('COMPLETED');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "e9f8fe83-b71f-4f13-b413-41545939acb5",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"recurring_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{recurring_one_click_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{recurring_one_click_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "150e367f-0993-4f64-9f30-0e661b2f4115",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** to create new one-click payment with parameter preauth='true', [see more](https://integration.unlimint.com/#createRecurring)\n* Pre-authorized one-click payment is created in the system and redirect URL is returned to Merchant in JSON format\n* Merchant redirects Customer to the payment page with provided URL\n* Merchant can complete or reverse (void) pre-authorized one-click payment using PATCH request in JSON format with payment id and recurring_data.status_to='REVERSE' or \"COMPLETE\" to **/api/recurrings/{recurring_id}**\n* Merchant receives response with update one-click payment result information (status=\"VOIDED\" or \"COMPLETED\")\n* If merchant doesn't send complete or reverse request ([see more](https://integration.unlimint.com/#updateRecurring)), one-click payment will be completed automatically in 7 calendar days\n* Amount in completion update request can be less, equal or more than preauthorized amount in first request",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab9a9dbd-c1a7-48c0-806c-f40e1ee32e15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab24fa15-583c-4eaa-acbd-de1b2b2e8bd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "name": "Reverse one-click payment (void)",
            "item": [
              {
                "name": "Create pre-authorized one-click payment to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.variables.set('recurring_one_click_id_to_reverse', response.recurring_data.id);",
                        "    postman.setNextRequest('Reverse pre-authorized one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "cd5c5f87-7f60-49c6-abf9-2876a83f8a4f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse pre-authorized one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc38486f-e062-48f3-9283-a806432da50a",
                      "exec": [
                        "pm.expect(pm.variables.get('recurring_one_click_id_to_reverse')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c06618e-e4f4-4354-8481-a3a07d39895f",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('status');",
                        "    pm.expect(response.recurring_data.status).to.equal('VOIDED');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "cdb850d8-8313-482c-941a-09fa4112b1da",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"recurring_data\": {\n    \"status_to\": \"REVERSE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{recurring_one_click_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{recurring_one_click_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "8f43724e-d371-4f9d-9ac3-4a7bbfeb65f1",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** to create new one-click payment, [see more](https://integration.unlimint.com/#createRecurring)\n* Merchant receives callback with transaction result information (with recurring id)\n* Merchant makes PATCH request in JSON format with recurring id and recurring_data.status_to='REVERSE' to **/api/recurrings{recurring_id}** to reverse (void) one-click payment, [see more](https://integration.unlimint.com/#updateRecurring)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab9a9dbd-c1a7-48c0-806c-f40e1ee32e15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab24fa15-583c-4eaa-acbd-de1b2b2e8bd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "id": "6c64bcce-e848-460f-8ff6-c23392bf446d",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de43d5a1-399f-448f-8a0e-428b6a97c9df",
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e2d5a9f-ee42-4736-856f-67708433fd83",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Limits",
        "item": [
          {
            "name": "Get limits for refunds and payouts",
            "item": [
              {
                "name": "Get limits for refunds and payouts",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee62cff-8ea2-4f65-8f5f-8d0398844f22",
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922767d3-ad8a-4d08-8f8d-8f43445739d6",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('remaining_limits');",
                        "    pm.expect(response.remaining_limits).to.have.property(pm.environment.get(\"TERMINAL_CURRENCY\"));",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "3f6cba63-2a2c-4dd8-b867-b8ad1a29c80c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/limits/?request_id={{$guid}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "limits",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "dce2a6ef-22a2-45b0-8f93-13423f07e4ac",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/limits) to get available refunds and payouts limits, [see more](https://integration.unlimint.com/#limits)\n* Available withdrawal balance for refunds and payouts by all the currencies linked to the terminal_code from merchant authorization context.\n* When NULL for specific currency is returned - withdrawal balance for this currency is disabled\n* When 0 for specific currency is returned - remaining withdrawal balance for this currency is 0\n* Service returns previous limits value (cache value with life time - 1 second) in case when from one merchant was received more than 1 GET request per 1 second. Only successfully authorized merchant can make this kind of request.",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "159177ac-2419-4ebd-9ab4-649627665a7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b453ec72-8f2a-48ef-8f57-f6701d514f10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "id": "45af0b2a-2a7b-4567-93e7-d9a8e39989fa",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11ef98db-af55-480e-b811-9f8b33209b0b",
              "type": "text/javascript",
              "exec": [
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "153987f3-9f2b-4350-84d4-75986eb18250",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Reports",
        "item": [
          {
            "name": "Get reports",
            "item": [
              {
                "name": "Initiate the reports’ preparation",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "236ac2c1-a1d3-49df-8a7c-6f3adf546531",
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "pm.variables.set(\"request_time\", new Date());",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bde1d8b-7ffb-4902-88db-d96149244093",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.jsonBody();",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('sample_id');",
                        "    pm.collectionVariables.set('reports_sample_id', response.sample_id);",
                        "    postman.setNextRequest('Get a list of reports');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "d536eedc-836c-4341-b733-2d2aef0376b7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"reports_data\": {\n        \"start_date\": \"2022-03-01\",\n        \"end_date\": \"2022-03-07\",\n        \"report_type\": [\"regular_settlement\",\"icpp_settlement\"]\n    }\n}\n\n"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get a list of reports",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1cb055d-6032-497f-8be8-0c38fca65e92",
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('reports_sample_id')).to.not.be.undefined;",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51a45eb8-0087-47a1-a1fe-ccf9b7ac8167",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    var response = pm.response.json();",
                        "    pm.collectionVariables.set('reports_sample_id', response.sample_id);",
                        "    postman.setNextRequest('Download report file');",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "55bd6882-512f-4592-bddb-67923e206251",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports/{{reports_sample_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports",
                      "{{reports_sample_id}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Download report file",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12076835-c415-463f-b816-8e40012708b0",
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('reports_sample_id')).to.not.be.undefined;",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aa94cc1-c87f-4dd7-8727-b266e4e24ea4",
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "id": "e1dae955-f325-4cfa-8f52-80a1f66a772b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/octet-stream",
                      "type": "text"
                    }
                  ],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports/download/{{reports_sample_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports",
                      "download",
                      "{{reports_sample_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "5a1d3044-a86e-41fe-835b-1bdc446f70f8",
            "description": "*   Merchant makes POST request in JSON format to endpoint (/api/reports) to initiate preparation of reports files\n*   Only successfully authorized merchant can make this kind of request\n*   If files of reports according to POST request's parameters are not found, then the empty array is returned in response to POST request\n*   Merchant makes GET request in JSON format to endpoint (/api/reports/{sample_id}) to get a list of reports with links to files' downloading\n*   Merchant makes GET request in JSON format to endpoint (/api/reports/download/{id}) to download files of report’s\n*   All report files (in archive) or single report file can be downloaded\n*   To download report file the request header 'Accept' must be set to 'application/octet-stream'"
          }
        ],
        "id": "8ea2822f-8b22-4c97-bfbe-c34ddcfb6bd7"
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "3d331a59-94fa-4ab9-b2cb-9f5ada0621f8",
          "type": "text/javascript",
          "exec": [
            "var moment = require('moment');",
            "",
            "pm.variables.set('request_name', pm.info.requestName);",
            "pm.variables.set('expiration', moment().add(1, 'year').format('MM/YYYY'));",
            "pm.variables.set('customer_id', \"{{$randomUserName}}\");",
            "",
            "pm.collectionVariables.set('tokens', '(' + function () {",
            "    return {",
            "        obtain: function (terminal_code, password) {",
            "            var unlimint_api_url = pm.environment.get('UNLIMINT_API_URL');",
            "",
            "            pm.sendRequest({",
            "                url: `${unlimint_api_url}/api/auth/token`,",
            "                method: 'POST',",
            "                header: 'Content-Type:application/x-www-form-urlencoded',",
            "                body: {",
            "                    mode: 'raw',",
            "                    raw: `grant_type=password&terminal_code=${terminal_code}&password=${password}`",
            "                }",
            "",
            "            }, (err, res) => {",
            "                if (err || res.code !== 200) {",
            "                    throw new Error('Authentication Error');",
            "                }",
            "",
            "                var response = res.json();",
            "                pm.variables.set('access_token', response.access_token);",
            "            });",
            "        }",
            "    }",
            "} + ')();');"
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "5f4b868d-e499-4b6b-a2f8-e10dfaaa6d55",
          "type": "text/javascript",
          "exec": [
            ""
          ]
        }
      }
    ]
  }
}
