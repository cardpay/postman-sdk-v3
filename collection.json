{
  "collection": {
    "info": {
      "_postman_id": "9dacc77f-6ab0-4094-82b5-d6b2db8b4045",
      "name": "Unlimint REST API (3.0)",
      "description": "## Installation\n\n1.  Install Postman 8.5+\n2.  Download and import [collection file](https://raw.githubusercontent.com/cardpay/postman-sdk-v3/master/collection.json)\n3.  Download and import [environment file](https://raw.githubusercontent.com/cardpay/postman-sdk-v3/master/sandbox.json)\n    \n\n## API usage\n\nExecute any section from Postman collection  \nFor more information about API v3 please visit [documentation web-site](https://integration.unlimint.com).\n\n## Notes\n\n*   constants ('UNLIMINT_API_URL', 'PAYMENTPAGE_TERMINAL_CODE' and so on) are [Postman environment variables](https://learning.postman.com/docs/postman/variables-and-environments/variables/), defined for 'sandbox' environment.\n*   following variables are defined for collection scope *(click 'Edit' button on 'unlimint-api' collection and see 'Pre-request Script' section)*:\n    *   request_name — name of the test that is being executed, using for 'merchant_order.description' field value, in request's 'Body' section\n    *   expiration — customer's card expiration date, using for 'card_account.card.expiration' field value, in gateway request 'Body' section. Format: mm/yyyy\n    *   tokens — variable with 'obtain' function which is calling in order to get API authorization tokens\n*   other variables ('{{payment_id_to_complete}}', '{{payment_id_to_reverse}}', etc) are defined in 'Pre-request Script' and 'Tests' sections for particular request.",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "name": "Authorization",
        "item": [
          {
            "name": "Get authorization tokens",
            "item": [
              {
                "name": "Get authorization token",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful response\", function () {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('access_token');",
                        "    pm.expect(response).to.have.property('refresh_token');",
                        "    pm.expect(response).to.have.property('expires_in');",
                        "    pm.expect(response).to.have.property('refresh_expires_in');",
                        "",
                        "    pm.variables.set('access_token', response.access_token);",
                        "    pm.variables.set('refresh_token', response.refresh_token);",
                        "});",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "6cda8100-43d1-41d1-b96d-9e4c21f27d33"
                    }
                  }
                ],
                "id": "216904b4-7bcb-4ccb-bc6c-b38c29e33d71",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "key": "grant_type",
                        "value": "password",
                        "type": "text"
                      },
                      {
                        "key": "terminal_code",
                        "value": "{{PAYMENTPAGE_TERMINAL_CODE}}",
                        "type": "text"
                      },
                      {
                        "key": "password",
                        "value": "{{PAYMENTPAGE_PASSWORD}}",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/auth/token",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "auth",
                      "token"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "f86c2b90-083b-4486-9174-b8094b1d50b1",
            "description": "Get authorization tokens for every transaction request\n------------------------------------------------------\n\n* In order to perform any API call the access token must be obtained.\n* To do this Merchant needs to send POST request to the API token endpoint.\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values.\n* After receiving access token (one from the pair) merchant should use in one create, update or get transaction information request\n* Merchant can receiving new pair of tokens (access and refresh tokens) for every transaction request and don't use refresh token for tokens pair refreshing\n\n\nGet authorization tokens for more than one request \n------------------------------------------------------\n\n* After receiving access token merchant can save access and refresh tokens in his site\n* Merchant can use this pair of tokens for more than one transaction request\n* After lifetime of access token is ended, merchant can use refresh token for refreshing (getting new pair) tokens (see more in Refresh token case below)\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "f324607e-3afb-4075-8447-ca4021350953"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "58fed0ea-0275-47eb-a1fe-e84cbc779258"
                }
              }
            ]
          },
          {
            "name": "Refresh token",
            "item": [
              {
                "name": "Refresh authorization token",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful response\", function () {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('access_token');",
                        "    pm.expect(response).to.have.property('refresh_token');",
                        "    pm.expect(response).to.have.property('expires_in');",
                        "    pm.expect(response).to.have.property('refresh_expires_in');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "2625fb80-ac36-4624-9ce0-6bfaa757648b"
                    }
                  }
                ],
                "id": "117285cb-0575-469b-9b63-e76be50b4afa",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "key": "grant_type",
                        "value": "refresh_token",
                        "type": "text"
                      },
                      {
                        "key": "refresh_token",
                        "value": "{{refresh_token}}",
                        "type": "text"
                      }
                    ]
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/auth/token",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "auth",
                      "token"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "a43703a7-a9ef-4d94-962f-89c6435b1b4d",
            "description": "* Merchant can send a POST request to the **/api/auth/token** endpoint and specify refresh token as a request param.\n* A result of this request will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens (see 'Get authorization token' use case)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "8a2b1fea-5c16-4acb-b51d-25c231eb6d1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "6ef2ab5d-eda3-45b6-8c3f-fba88ecac078"
                }
              }
            ]
          },
          {
            "name": "Get authorization tokens for more than one request",
            "item": [
              {
                "name": "Create pre-authorized payment (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        "pm.variables.set('request_time', new Date());",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);",
                        "pm.collectionVariables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "f16b6361-598a-49d0-bccd-d6ca5bee84b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.collectionVariables.set('payment_id_to_complete', response.payment_data.id);",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "",
                        "    postman.setNextRequest('Get payment by payment id (reusable tokens)');",
                        "});",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "9fe0407a-8496-49ad-b697-306cf1a92c78"
                    }
                  }
                ],
                "id": "a47a7f97-4bec-4821-a050-901b170ffb22",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by payment id (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "fcb91f53-a0ae-4c45-8000-d8c53e62a8a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.collectionVariables.get('payment_id_to_complete'));",
                        "    ",
                        "    postman.setNextRequest('Complete pre-authorized payment (reusable tokens)');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "fd5a0777-fe7d-4795-b467-739b95bfac3d"
                    }
                  }
                ],
                "id": "f833ddfb-dd26-4aea-be26-3700502c0073",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized payment (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.variables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "pm.variables.set(\"request_time\", new Date());",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "55f0d1dd-0f0f-4435-83f4-2a4411849b66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('COMPLETED');",
                        "    ",
                        "    postman.setNextRequest('Get payment by payment id again (reusable tokens)');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "c40004c7-d1a4-421b-876c-3e7279dbbe55"
                    }
                  }
                ],
                "id": "8f18694d-712a-4a42-88af-5e2048bb29f3",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by payment id again (reusable tokens)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('reusable_tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "a9d4c1cb-856a-4723-90c4-bf0890152599"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.variables.get('payment_id_to_complete'));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "e425d46c-4193-46ff-b455-1603e51f934a"
                    }
                  }
                ],
                "id": "6d0348b4-03ab-4b59-b43a-659ba72c51fc",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token_{{GATEWAY_POSTPONED_TERMINAL_CODE}}}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "cd504d36-1a4c-4617-a8f7-0b2e3a042795",
            "description": "* After receiving access token merchant can save access and refresh tokens on his side\n* Merchant can use this pair of tokens for more than one transaction request\n* After lifetime of access token is ended, merchant can use refresh token for refreshing (getting new pair) tokens (see more in Refresh token case below)\n* If a lifetime of refresh token is ended merchant should send new request to the API token endpoint to get new pair of tokens\n* As a result Merchant will receive an [ApiTokens](https://integration.unlimint.com/#ApiTokens) JSON document containing a token pair and tokens lifetime values\n* See 'Pre-request Scripts' section for 'reusable_tokens' function",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.collectionVariables.set('reusable_tokens', '(' + function () {",
                    "    return {",
                    "        obtain: function (terminal_code, password) {",
                    "            var moment = require('moment');",
                    "            var TOKEN_MIN_VALIDITY = 100;",
                    "            var unlimint_api_url = pm.environment.get('UNLIMINT_API_URL');",
                    "",
                    "            function unsetVar(name) {",
                    "                pm.collectionVariables.unset(`${name}_${terminal_code}`);",
                    "            }",
                    "",
                    "            function setVar(name, value) {",
                    "                pm.collectionVariables.set(`${name}_${terminal_code}`, value);",
                    "            }",
                    "",
                    "            function getVar(name, defValue) {",
                    "                return pm.collectionVariables.get(`${name}_${terminal_code}`) || defValue;",
                    "            }",
                    "",
                    "            var now = moment().unix();",
                    "            var expires_in = getVar('expires_in', 0);",
                    "            var refresh_expires_in = getVar('refresh_expires_in', 0);",
                    "",
                    "            if (expires_in - now >= TOKEN_MIN_VALIDITY && getVar('access_token')) {",
                    "                setVar('access_token', getVar('access_token'));",
                    "",
                    "            } else {",
                    "                var refresh_token = getVar('refresh_token');",
                    "                var request_body = `grant_type=refresh_token&refresh_token=${refresh_token}`;",
                    "",
                    "                if (refresh_expires_in - now < TOKEN_MIN_VALIDITY || !refresh_token) {",
                    "                    request_body = `grant_type=password&terminal_code=${terminal_code}&password=${password}`;",
                    "                }",
                    "",
                    "                unsetVar('access_token');",
                    "                unsetVar('refresh_token');",
                    "                unsetVar('expires_in');",
                    "                unsetVar('refresh_expires_in');",
                    "",
                    "                pm.sendRequest({",
                    "                    url: `${unlimint_api_url}/api/auth/token`,",
                    "                    method: 'POST',",
                    "                    header: 'Content-Type:application/x-www-form-urlencoded',",
                    "                    body: {",
                    "                        mode: 'raw',",
                    "                        raw: request_body",
                    "                    }",
                    "",
                    "                }, (err, res) => {",
                    "                    if (err || res.code !== 200) {",
                    "                        throw new Error('Authentication Error');",
                    "                    }",
                    "",
                    "                    var response = res.json();",
                    "                    setVar('access_token', response.access_token);",
                    "                    setVar('refresh_token', response.refresh_token);",
                    "                    setVar('expires_in', response.expires_in + moment().unix());",
                    "                    setVar('refresh_expires_in', response.refresh_expires_in + moment().unix());",
                    "                });",
                    "            }",
                    "        }",
                    "    }",
                    "} + ')();');"
                  ],
                  "id": "087db6d1-b65a-44a0-85ae-b024b2845727"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "01d01d50-4704-42c9-8fb8-8b93a48364e5"
                }
              }
            ]
          }
        ],
        "id": "3da51624-aea8-4449-bf9b-1980aabe59e2",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "5f9f66f1-361c-4202-a729-71816a4f939a"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "e9c84fed-52da-4dee-8b7d-697a16385e64"
            }
          }
        ]
      },
      {
        "name": "Payments",
        "item": [
          {
            "name": "Create payment (payment page)",
            "item": [
              {
                "name": "Create payment (payment page)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "bed6479d-a890-4ff6-8387-767713de4d17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "f324adde-9c89-4573-9bc6-32973b9b41b8"
                    }
                  }
                ],
                "id": "e19a4c47-64c1-471d-b79f-d57f255a1540",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "value": "application/json",
                      "type": "text"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "58e60f19-bb1b-4579-ae3c-c4514ec510e5",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* Card data is filled in by customer on hosted payment page (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "b81bd6ee-49ba-492e-a636-afffcaa6d74a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "d56f1fcf-6a76-48ef-beaa-c4919729e773"
                }
              }
            ]
          },
          {
            "name": "Create payment without 3-D Secure 1",
            "item": [
              {
                "name": "Create payment (without 3-D Secure 1, gateway)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "41c3ce79-dc99-489b-95f2-89dc27bc4af8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "a41f6cd9-163d-4ea6-a565-f7d70e57c4cb"
                    }
                  }
                ],
                "id": "7a1952aa-fc9f-456d-bc16-39dd9c4573ad",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "a976dca0-3945-4638-ae7c-a3a1ea37afe5",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "36b91583-75e5-42c1-8591-f8e8ecb4a6f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "47fedb83-0b4f-4210-8cda-7b108ac5d55d"
                }
              }
            ]
          },
          {
            "name": "Create payment with 3-D Secure 1",
            "item": [
              {
                "name": "Create payment (with 3-D Secure 1, gateway)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "2ad19b4f-dc67-4ecf-8717-99f2bed6492c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    // emulate customer behaviour, performing GET request to redirect url",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "cb63c923-87f5-4c01-a9d5-557676e848b9"
                    }
                  }
                ],
                "id": "89a468a3-bbca-4858-8a68-6f0af2fcbeb9",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "522f2659-0ac6-48fd-a862-f1e3df7df432",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* The results of 3-D Secure 1 verification depend on the card provided in request and can be received only after customer redirects to redirect URL and passes 3-D Secure (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "e362d790-64f2-4107-a6dc-1cfb5a4255be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "0ede3f12-f01b-4c87-b386-dc3b411cc9ec"
                }
              }
            ]
          },
          {
            "name": "Create payment with 3-D Secure 2",
            "item": [
              {
                "name": "Create payment (3-D Secure 2)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "73505a4b-d55f-42d2-8dcf-d1f606d563b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "    ",
                        "    var response = pm.response.json()",
                        "    pm.expect(response).to.have.property('redirect_url')",
                        "})",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "276a4dd0-d77c-498e-b8a3-08393a096c80"
                    }
                  }
                ],
                "id": "1024360c-bdb1-4188-9b60-f06e8b42adb5",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"trans_type\": \"01\"\n    },\n    \"card_account\": {\n        \"acct_type\": \"01\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"+1 123456789\",\n        \"work_phone\": \"+1 987654321\",\n        \"home_phone\": \"+1 462526747\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "e98d537a-ecd7-4d34-b7f9-a51cc8a972fd",
            "description": "* Merchant makes POST request in JSON format (with list of special 3-D Secure 2 parameters in request) to endpoint **/api/payments** to create new payment \n* Payment is created in the system and redirect URL is returned to Merchant in JSON format\n* The results of 3-D Secure 2 verification depend on the card provided in request and can be received only after customer redirects to redirect URL and passes 3-D Secure (asynchronous process - out of scope of Postman collection)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "aa050c15-9b43-4dc5-92b6-52c273033238"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "32b0f395-1adb-40cb-9bfc-2394b363be9b"
                }
              }
            ]
          },
          {
            "name": "Create AVS payment",
            "item": [
              {
                "name": "Create payment (AVS)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('AVS_PAYMENTPAGE_TERMINAL_CODE');",
                        "var password = pm.environment.get('AVS_PAYMENTPAGE_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "efb4458a-d2c8-410e-984f-29e346fc9b58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "08cf66e3-7b25-4d2b-8804-4c0a5a67c82e"
                    }
                  }
                ],
                "id": "e4905ae8-aa05-4a59-9904-371b67f55f62",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"authentication_request\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "56503907-4a94-4b84-bd70-b29cf534d644",
            "description": "* AVS request possibility in wallet should be enabled with special custom 3-D Secure mode by Unlimint support\n* Merchant makes POST request in JSON format to api/payments endpoint  to create new AVS request (address verification request - for UK and US billing addresses), see more in '[Address verification](https://integration.unlimint.com/#payments)' section\n* AVS request is created in the system and redirect URL is returned to merchant in JSON format (payment page URL)\n* Customer fill in the customer data (card data and billing address for this card) on the AVS payment page and if data is correct directs to Result page\n* Merchant also gets card.token in callback and response for card from payment page if request had a parameter \"payment_data.generate_token\"\n* In error case (case of error response of AVS service or other errors) merchant gets DECLINED status of transaction in callback in JSON format, using method POST\n* To get full information about created AVS request merchant receives callback",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "bfc8e6f7-1dce-4c3b-b410-9f6c5a22a2bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "96dd74ce-c931-4235-abe6-7999839456ad"
                }
              }
            ]
          },
          {
            "name": "Reverse payment (void)",
            "item": [
              {
                "name": "Create pre-authorized payment to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "af18803d-0977-448d-ae73-3ab034b3388a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.collectionVariables.set('payment_id_to_reverse', response.payment_data.id);",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Reverse pre-authorized payment');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "ee5b229e-3d38-4dcb-b5e1-736bdd9c7091"
                    }
                  }
                ],
                "id": "a1a2adb1-7381-445b-b943-7e3ca6db5cb9",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_reverse')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "ff50a88d-1788-461a-940c-46d889a5a13c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    ",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('VOIDED');",
                        "})"
                      ],
                      "type": "text/javascript",
                      "id": "5aa9a46e-63a3-4479-a890-57fa3b872ca4"
                    }
                  }
                ],
                "id": "17188031-7a37-4846-ad93-aff478811db4",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"REVERSE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "4e586676-c021-4526-86fc-6565d5f078da",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment, [see more](https://integration.unlimint.com/#createPayment).\n* Merchant receives callback with transaction result information (with payment id)\n* Merchant makes PATCH request in JSON format with payment id and payment_data.status_to='REVERSE' to **/api/payments/{payment_id}** to reverse (void) payment, [see more](https://integration.unlimint.com/#updatePayment).",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "24b5d0c7-ddea-4ecb-88e4-a9e86df326d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "8850e862-fe7f-482d-bcad-efe437449ac0"
                }
              }
            ]
          },
          {
            "name": "Create pre-authorised payment",
            "item": [
              {
                "name": "Create pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.variables.set('merchant_order_id', merchant_order_id);",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "986d2ea7-3ca9-45d5-9f81-da8505ff383a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;",
                        "    pm.collectionVariables.set('payment_id_to_complete', response.payment_data.id);",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "",
                        "    postman.setNextRequest('Complete pre-authorized payment');",
                        "});",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "aa27e67c-2ab1-4561-b73b-9e3009c8bb10"
                    }
                  }
                ],
                "id": "668ee06f-5c4e-4d61-bdf2-c3baadf66ddd",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "19a4cc3a-2213-444f-9c96-d5927dcbfda1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('COMPLETED');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "fed742e8-e696-446f-a316-f8c7c82be93c"
                    }
                  }
                ],
                "id": "1dd02330-6a25-4599-97ca-fb9fb1cc38e2",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "ff4a1e82-b559-4b43-ab98-9e663c8e00f9",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payments** to create new payment with parameter preauth='true', [see more](https://integration.unlimint.com/#createPayment)\n* Preauth authorization payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page with provided URL\n* Merchant can complete or reverse (void) preauthorized payment using PATCH request in JSON format with payment id and payment_data.status_to='REVERSE' or \"COMPLETE\" to **/api/payments/{payment_id}**\n* Merchant receives response with update payment result information (status='VOIDED' or 'COMPLETED')\n* If merchant doesn't send complete or reverse request ([see more](https://integration.unlimint.com/#updatePayment)) payment will be completed automatically in 7 calendar days\n* Amount in completion update request can be less or more than preauthorized amount in first request   ",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "a3811576-3586-4eea-bdf7-ff8dc2d04950"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "f8585be3-5148-46ab-8d90-ea7dd0c5c8c0"
                }
              }
            ]
          },
          {
            "name": "Create payment with card token",
            "item": [
              {
                "name": "Create payment with card tokenization",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "b97773ed-15fa-4ce2-92fa-4b12a58e9a4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.collectionVariables.set('payment_id_for_card_token', response.payment_data.id);",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Get payment by id for card token');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "3574e484-9a0f-4074-8001-1c7df9f77b9f"
                    }
                  }
                ],
                "id": "8e819f5d-dad5-4c1a-b22f-f14f8e771e69",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"generate_token\": true\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payment by id for card token",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_for_card_token')).to.not.be.undefined;",
                        "",
                        "postman.setNextRequest('Create payment with card token');"
                      ],
                      "type": "text/javascript",
                      "id": "8221207d-7606-45eb-ad14-1b49f40f4413"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('card_account');",
                        "    pm.expect(response.card_account).to.have.property('token');",
                        "    pm.collectionVariables.set('card_token', response.card_account.token);",
                        "    ",
                        "    postman.setNextRequest('Create payment with card token');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "7da8c7d3-d74e-4a29-b665-6a816f6802a5"
                    }
                  }
                ],
                "id": "8ab3fab2-7a5b-4912-8114-cb541c5a2a43",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_for_card_token}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_for_card_token}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create payment with card token",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.collectionVariables.get('card_token')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);",
                        "pm.collectionVariables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "51992566-c7f1-4d75-902d-609d31dca75e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "   ",
                        "    postman.setNextRequest('Get payment by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "d45750db-bce3-4d0b-8222-34f6554545cc"
                    }
                  }
                ],
                "id": "b204f565-9974-41a6-acae-6f72885701df",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"token\": \"{{card_token}}\",\n        \"card\": {\n        \t\"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "abf9f898-580d-4dec-864e-199381d79c2b",
            "description": "* Merchant makes POST request in JSON format (with payment_data.generate_token parameter in request) to endpoint **/api/payments** to create new payment with card tokenization\n* Payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page (Unlimint or Merchant site) with provided URL\n* After successful transaction merchant can use card token (from callback) in the next transactions",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ],
                  "id": "e3e5429d-1eb3-4ded-acbd-f1f98e25593f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "38dbb10a-59d8-4530-ad80-97ef2b5e6681"
                }
              }
            ]
          },
          {
            "name": "Get payments list",
            "item": [
              {
                "name": "Get payment by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_merchant_order_id')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "b7f69ffa-a7f7-4de0-a13d-ba320a26453a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    ",
                        "    pm.collectionVariables.set('last_payment_id', response.data[0].payment_data.id);",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "67f2ccd1-29c7-4327-8c54-554074681bba"
                    }
                  }
                ],
                "id": "69426992-646b-428a-9538-cb94f4d597d4",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payments information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "696fb910-5b14-410b-8e62-3733c9bc710a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "f0e0f99b-05a0-4ec0-9119-ac66358ddecb"
                    }
                  }
                ],
                "id": "d24f2268-6faf-4176-b3b1-88fad384e47b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "97b81426-3dd0-44e3-a38a-425426ee603e",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payments) to get information about payments list, [see more](https://integration.unlimint.com/#getPayments)\n* Merchant receives GET response about transactions (payments list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "0fec225b-59f1-4996-8300-550f77699aa7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "3b16e2fe-40ea-4874-902d-b78e88fff4c2"
                }
              }
            ]
          },
          {
            "name": "Get payment by payment id",
            "item": [
              {
                "name": "Get payment by payment id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_payment_id')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "c1edfea5-d0f5-4e78-9109-7aeda314c814"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('id');",
                        "    pm.expect(response.payment_data.id).to.equal(pm.collectionVariables.get('last_payment_id'));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "06268d37-0364-482d-8af3-7ee735d8ef62"
                    }
                  }
                ],
                "id": "bc296873-a616-492b-9d24-0775740b6892",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{last_payment_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{last_payment_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "84435173-e77d-4d78-b6d6-69e51c06a1d8",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payments/{payment_id}) for getting information about payment by payment id, [see more](https://integration.unlimint.com/#getPayment)\n* Merchant receives GET response about transaction (payment) result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "d701a6db-9610-4c0a-9186-4d821e1d3b91"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "43db0711-9c92-4f51-8fb1-eb1fa5e5a0c8"
                }
              }
            ]
          },
          {
            "name": "Create installment payment (one-phase)",
            "item": [
              {
                "name": "Create issuer financed installment payment (one-phase)",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "    \r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "58c7c3e5-0b6f-4706-bff2-d28a2ec4ca1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "d0cddd46-3e6c-4f1f-90e1-8162f04a24b0"
                    }
                  }
                ],
                "id": "fb1d3720-0c28-44da-9fdb-ad6db9825e29",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"installment_type\": \"IF\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create merchant financed installment payment (one-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "ef421c77-bd01-4b8f-97ed-8ec7927325a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "    \r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "dc799e45-f58a-4c05-9b14-2a98b9bad17e"
                    }
                  }
                ],
                "id": "ea3daed1-cd46-46d3-a279-62b647ceed68",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"installment_type\": \"MF_HOLD\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "4011a210-b4a8-4369-87ca-8a96ff8df628",
            "description": "Merchant makes POST request in JSON format to endpoint **/api/payments** to create new Installment payment (one-phase), [see more](https://integration.unlimint.com/#createPayment).\n\n**How to create Installment payment:**\n\n*   Make POST-request\n*   Click on 3DS redirect URL from response message\n*   Emulate successful 3DS validation\n    \n\nAfter successful 3DS validation payment will be completed"
          },
          {
            "name": "Create installment payment (two-phase)",
            "item": [
              {
                "name": "Create merchant financed installment payment (two-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');\r",
                        "\r",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');\r",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');\r",
                        "\r",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));\r",
                        "tokens.obtain(terminal_code, password);\r",
                        "\r",
                        "var merchant_order_id = uuid.v4();\r",
                        "pm.variables.set('merchant_order_id', merchant_order_id);\r",
                        "pm.variables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "6f157e50-632d-4de7-b1ad-72be6d5c1868"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {\r",
                        "    pm.response.to.be.ok;\r",
                        "    pm.response.to.have.jsonBody();\r",
                        "\r",
                        "    var response = pm.response.json();\r",
                        "    pm.expect(response).to.have.property('redirect_url');\r",
                        "    \r",
                        "    pm.expect(response.payment_data.id).to.not.be.undefined;\r",
                        "    pm.collectionVariables.set('payment_id_to_update', response.payment_data.id);\r",
                        "    \r",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {\r",
                        "        pm.expect(response_after_redirect.code).to.equal(200);\r",
                        "    });\r",
                        "    \r",
                        "    postman.setNextRequest('Update Merchant Financed Installment payment (two-phase)');\r",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "a5006bed-8b78-4ed6-aefe-e9310a372073"
                    }
                  }
                ],
                "id": "40d6c66b-181b-4516-b065-3c94262253d1",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [],
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"request\": {\r\n        \"id\": \"{{$guid}}\",\r\n        \"time\": \"{{request_time}}\"\r\n    },\r\n    \"merchant_order\": {\r\n        \"id\": \"{{$randomUUID}}\",\r\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\r\n    },\r\n    \"payment_method\": \"BANKCARD\",\r\n    \"payment_data\": {\r\n        \"amount\": \"12.34\",\r\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\r\n        \"preauth\": true,\r\n        \"installment_type\": \"MF_HOLD\",\r\n        \"installments\": \"6\" \r\n    },\r\n    \"card_account\": {\r\n        \"card\": {\r\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\r\n            \"holder\": \"{{$randomFullName}}\",\r\n            \"expiration\": \"{{expiration}}\",\r\n            \"security_code\": \"100\"\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\r\n        \"id\": \"DfVg56Gvx\"\r\n    }\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Update merchant financed installment payment (two-phase)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_to_update')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "9e4fc82a-77c4-4ab0-b1a8-4fd9107eb7d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    ",
                        "    pm.expect(response).to.have.property('payment_data');",
                        "    pm.expect(response.payment_data).to.have.property('status');",
                        "    pm.expect(response.payment_data.status).to.equal('AUTHORIZED');",
                        "})"
                      ],
                      "type": "text/javascript",
                      "id": "faf06132-0f44-46d9-9a14-d653fccdb276"
                    }
                  }
                ],
                "id": "3cd82d25-6188-4545-85f3-d97d92e79ade",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"payment_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments/{{payment_id_to_update}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments",
                      "{{payment_id_to_update}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "5d4d4507-58d2-4ccc-a0bf-babb183b38e5",
            "description": "*   Merchant makes POST request in JSON format to endpoint **/api/payments** to create new Installment payment (two-phase), [see more](https://integration.unlimint.com/#createPayment).\n    \n\n**How to create two-phase Installment payment:**\n\n*   Make POST-request\n*   Click on 3DS redirect URL from response message\n*   Emulate successful 3DS validation\n*   Make PATСH-request to update (complete) Installment payment\n    \n\n**Important:** in POST-request non-3DS card is used. These settings are relevant only for the test collection (due to Sandbox features) - real Installment payments can be created only for cards with 3DS enabled"
          }
        ],
        "id": "cb952acc-0a49-4299-b770-b07f602f5d26",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('PAYMENTPAGE_TERMINAL_CODE');",
                "var password = pm.environment.get('PAYMENTPAGE_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ],
              "id": "3cef093f-6da5-4789-ad9b-7b7e7e4ce333"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "b1f50e25-b697-4f18-bcfd-9de82eef721b"
            }
          }
        ]
      },
      {
        "name": "Refunds",
        "item": [
          {
            "name": "Create refund",
            "item": [
              {
                "name": "Create payment for refund",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    pm.collectionVariables.set('payment_id_for_refund', response.payment_data.id);",
                        "    ",
                        "    postman.setNextRequest('Create refund');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "439967a2-eb53-4a22-96d3-803ba1188414"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "047d6fbf-5f79-418e-87cc-9f7add8223ad"
                    }
                  }
                ],
                "id": "efa231dd-b96e-4684-a81e-cd352814bef2",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.collectionVariables.get('payment_id_for_refund')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);",
                        "pm.collectionVariables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "652b3dda-68c6-4e69-9f04-69720fdf7507"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    ",
                        "    pm.collectionVariables.set('last_refund_id', response.refund_data.id);",
                        "    ",
                        "    postman.setNextRequest('Get refund by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "22fa845c-7db7-4750-ac63-2779b355ef18"
                    }
                  }
                ],
                "id": "305d38e9-bb7f-45b7-8061-d5bf6f289f87",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_data\": {\n        \"id\": \"{{payment_id_for_refund}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "89c6c15e-16e7-4962-83d5-a9cefd77462d",
            "description": "* Merchant makes POST request in JSON format to create new refund to endpoint **/api/refunds**, [see more](https://integration.unlimint.com/#createRefund)\n* Merchant can create new refund only after successfully creation of payment or recurring payment\n* Merchant must have payment id (or recurring id) and send it in refund request\n* Merchant receives response with created transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "736d32a9-ae1d-4a9a-bb64-178c72c67657"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "1b06ecd6-4613-489d-918d-f64ed7d3848c"
                }
              }
            ]
          },
          {
            "name": "Get refunds list",
            "item": [
              {
                "name": "Get refund by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "94036c54-21a9-43c1-9152-5b0b15c3946e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    ",
                        "    pm.collectionVariables.set('last_refund_id', response.data[0].refund_data.id);",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "d3038d06-8b79-4299-8bbc-62b102a69088"
                    }
                  }
                ],
                "id": "b72b7820-d8de-497e-a112-0559105ee0a1",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get refunds information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "e13d68ad-2fbb-4de8-be72-b8707ec8fcf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "9751bd07-007e-47aa-960c-23c68340caca"
                    }
                  }
                ],
                "id": "81d19863-e77b-49ee-926d-e47c584db63e",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "value": "{{access_token}}",
                          "type": "string"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "20572cd4-53c7-4ead-8291-d4bfd3ba00ff",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/refunds) to get information about refunds list, [see more](https://integration.unlimint.com/#getRefunds)\n* Merchant receives GET response about transactions (refunds list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "f2b6c88b-ed63-4b2c-9347-1b345217a49c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "6ffa5fc5-ca83-4836-b353-d37a2303ec72"
                }
              }
            ]
          },
          {
            "name": "Get refund by refund id",
            "item": [
              {
                "name": "Get refund by refund id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_refund_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "7fc155dc-6c6e-4c9e-a2d0-b722030e2faa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('refund_data');",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    pm.expect(response.refund_data.id).to.equal(pm.collectionVariables.get('last_refund_id'));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "6f6ac27b-2b6b-43a7-b674-f17eebae63c2"
                    }
                  }
                ],
                "id": "340b526a-29c9-4514-9e07-3f01acd04188",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/{{last_refund_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      "{{last_refund_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "dbb5f766-4f23-42c0-8481-37e968a3330f",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/refunds/{refund_id}) to get information about refund by refund id, [see more](https://integration.unlimint.com/#getRefund)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "904fa291-9995-4633-8d24-95ba3385328d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "a26ce88e-5b00-4a2f-a1da-a6d4e1e07e15"
                }
              }
            ]
          },
          {
            "name": "Reverse refund (void)",
            "item": [
              {
                "name": "Create payment for reversed refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "37d86847-67be-485e-bc1f-dc12888fecb6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    ",
                        "    pm.sendRequest(response.redirect_url, (err, response_after_redirect) => {",
                        "        pm.expect(response_after_redirect.code).to.equal(200);",
                        "    });",
                        "    ",
                        "    pm.collectionVariables.set('payment_id_for_reversed_refund', response.payment_data.id);",
                        "    ",
                        "    postman.setNextRequest('Create refund to reverse');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "595e0f50-890e-4a8a-b470-c68b8961c2ff"
                    }
                  }
                ],
                "id": "822046ba-e15a-4fc1-a9b9-4016b3dc54e2",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payment_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"customer\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payments",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payments"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create refund to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payment_id_for_reversed_refund')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "f670d238-7d95-4898-89bf-35185dfbddfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Request success\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    ",
                        "    pm.collectionVariables.set('refund_id_to_reverse', response.refund_data.id);",
                        "    ",
                        "    postman.setNextRequest('Reverse refund');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "9ca25b2a-a671-4c9f-8edf-7d1281be2f7e"
                    }
                  }
                ],
                "id": "dfa62066-f3c3-410d-8003-f7cd2fd2ce54",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_data\": {\n        \"id\": \"{{payment_id_for_reversed_refund}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse refund",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('refund_id_to_reverse')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "cd1e9e20-fb01-4105-80e0-af68670cd473"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.refund_data).to.have.property('id');",
                        "    pm.expect(response.refund_data).to.have.property('status');",
                        "    pm.expect(response.refund_data.status).to.equal('VOIDED');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "afed9bdc-0205-4563-8291-a88cd2c35017"
                    }
                  }
                ],
                "id": "f4bdbcdf-f88d-4cb0-94c2-6704de1848f0",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"refund_data\": {\n        \"status_to\": \"REVERSE\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/refunds/{{refund_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "refunds",
                      "{{refund_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "ef56d748-1195-4ecc-97b9-9df899bce19c",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/refunds** to create new refund, [see more](https://integration.unlimint.com/#createRefund)\n* Merchant makes PATCH request in JSON format with refund id and refund_data.status_to='REVERSE' to **/api/refunds/{refund_id}** for reverse (void) refund - refund void possibility must be enabled by Unlimint manager, [see more](https://integration.unlimint.com/#updateRefund)\n* Merchant receives response with update result information (status='VOIDED')",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ],
                  "id": "d29f0a45-3795-47e4-8077-c5bf44e8fd8c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "c96a911e-2d4e-4f28-926c-6ed0c7c425fc"
                }
              }
            ]
          }
        ],
        "id": "91329739-a060-432e-9aff-0e4dc692bacf",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ],
              "id": "d4fdecfe-8dfb-4211-8191-7edc00289a2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "4d1473a3-7182-4fc5-97c3-86461df087dd"
            }
          }
        ]
      },
      {
        "name": "Payouts",
        "item": [
          {
            "name": "Create payout",
            "item": [
              {
                "name": "Create payout",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);",
                        "pm.collectionVariables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "0e121e80-1189-44b3-b403-a64500548ab7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    ",
                        "    pm.collectionVariables.set('last_payout_id', response.payout_data.id);",
                        "    ",
                        "    postman.setNextRequest('Get payout by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "d1565a53-2dd4-4176-b464-fa049952b4e7"
                    }
                  }
                ],
                "id": "aa03d6eb-acd4-478e-8157-f3b6a49d2c92",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payout_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"expiration\": \"{{expiration}}\"\n        },\n        \"recipient_info\": \"{{$randomUUID}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "0dbf3207-26cb-4c04-a514-f19b74bda6b1",
            "description": "* Merchant makes POST request in JSON format to create new payout to endpoint (/api/payouts), [see more](https://integration.unlimint.com/#createPayout)\n* Merchant receives response with transaction (payout) result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "96517514-af6c-4baf-bd9e-a3249eccee41"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "3202831b-8381-4d9f-9a66-68cd35fffdf1"
                }
              }
            ]
          },
          {
            "name": "Get payouts list",
            "item": [
              {
                "name": "Get payout by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "e01b29a0-b1b4-4ae8-88c5-1a7702d7a7f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.collectionVariables.set('last_payout_id', response.data[0].payout_data.id);",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "2139f70c-e245-4f20-a9fd-cc85934f8c81"
                    }
                  }
                ],
                "id": "6ee4313b-0965-4922-8237-9d0d88223264",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get payouts information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "41ce5e0b-ffc7-4251-9330-805b22ed7522"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "5fdc8259-c14c-4b64-b942-676e6f31831d"
                    }
                  }
                ],
                "id": "30ef93f3-ed16-4776-b6fc-b57f78a9877d",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "e1952186-3c02-45f7-8421-278af1ec9af1",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payouts) to get information about payouts, [see more](https://integration.unlimint.com/#getPayout)\n* Merchant receives GET response about transactions (payouts list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "2fcd86ab-0616-4024-856c-ef7aaabffd5f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "8cbb76a9-5110-43d4-8c6f-3a6deb349ce6"
                }
              }
            ]
          },
          {
            "name": "Get payout by payout id",
            "item": [
              {
                "name": "Get payout by payout id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_payout_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "fd6a5a50-a090-41f7-b565-6e9b97c3af27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('payout_data');",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    pm.expect(response.payout_data.id).to.equal(pm.collectionVariables.get('last_payout_id'));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "bd314900-9f2a-47a1-afa8-d62c31219fc3"
                    }
                  }
                ],
                "id": "11f5ad09-50dd-4f11-9b40-7cc073f15960",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/{{last_payout_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      "{{last_payout_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "fcb1fba4-ea04-43d6-a29f-3b1f74aaf529",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/payouts/{payout_id}) to get information about payout by payout id, [see more](https://integration.unlimint.com/#getPayout)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "9a072f30-4b7b-49dc-b631-456596c15b9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "37ffc903-c146-4629-82e7-143101f77756"
                }
              }
            ]
          },
          {
            "name": "Reverse payout (void)",
            "item": [
              {
                "name": "Create payout to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "cc46f486-eea2-4722-a36d-b8123b6b45c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Request success\", function () {",
                        "    pm.response.to.have.status(201);",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    ",
                        "    pm.collectionVariables.set('payout_id_to_reverse', response.payout_data.id);",
                        "    ",
                        "    postman.setNextRequest('Reverse payout');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "d86d3f7c-3c99-48bd-9957-c14d898743c1"
                    }
                  }
                ],
                "id": "6ceb2767-dbd1-4678-b202-ed8c9d3191e0",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"payout_data\": {\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        },\n        \"recipient_info\": \"{{$randomUUID}}\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse payout",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('payout_id_to_reverse')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "e1949a29-9cfd-474c-b631-1a53bd7a03f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "    pm.expect(response.payout_data).to.have.property('id');",
                        "    pm.expect(response.payout_data).to.have.property('status');",
                        "    pm.expect(response.payout_data.status).to.equal('VOIDED');",
                        "})",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "4d6bf636-307c-44e8-ba44-9b120263da00"
                    }
                  }
                ],
                "id": "28595bae-7741-45e7-9aee-e0de3d15f4f4",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"payout_data\": {\n        \"status_to\": \"REVERSE\"\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/payouts/{{payout_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "payouts",
                      "{{payout_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "d4d3f6d4-373c-43a6-9696-27319c808e78",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/payouts** to create new payout, [see more](https://integration.unlimint.com/#createPayout)\n* Merchant receives callback with transaction result information (with payout id)\n* Merchant makes PATCH request in JSON format with payout id and payout_data.status_to='REVERSE' to **/api/payouts/{payout_id}** for reverse (void) payout - payout void possibility must be enabled by Unlimint manager, [see more](https://integration.unlimint.com/#updatePayout)\n* Merchant receives response with update result information (status='VOIDED')",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                    "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                    "",
                    "var tokens = eval(pm.collectionVariables.get('tokens'));",
                    "tokens.obtain(terminal_code, password);"
                  ],
                  "id": "d441654d-7ae0-40da-a4c0-48caa8f63ba5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "57310607-cfd1-438f-b6c2-c5e9a9e585dd"
                }
              }
            ]
          }
        ],
        "id": "cd280bea-591d-411a-8b93-253f8cb0d581",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ],
              "id": "4cffb8ba-eaa8-4749-bcfd-521f9b5ad406"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "f79468ca-59f8-4e92-9863-5d319ffd1795"
            }
          }
        ]
      },
      {
        "name": "Recurrings",
        "item": [
          {
            "name": "Create one-click payment",
            "item": [
              {
                "name": "Create one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "fcf99213-c7b1-421e-81d7-eb64a793bd32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.collectionVariables.set('last_recurring_one_click_id', response.recurring_data.id);",
                        "    postman.setNextRequest('Get recurring by first recurring id');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "f6c88243-d355-4272-bca7-8e0886750f95"
                    }
                  }
                ],
                "id": "a9a1fba0-a0bf-450a-a214-ac1d65ebbf8b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\"\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "749896d6-8f06-4e4d-a217-31c2d3af8a0d",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** ([see more](https://integration.unlimint.com/#createRecurring)) to create new one-click payment (with 'initiator'='cit' in request) with card tokenization for recurrent payments\n* One-click payment is created in the system and redirect URL is returned to Merchant in JSON format (payment page URL)\n* Merchant redirects Customer to the payment page (Unlimint or Merchant site) with provided URL\n* Merchant can use filing.id (from the callback or get response) in the next one-click transactions using saved (tokenized) card",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "5e842ef4-9511-487e-8523-37aa845e71f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "baa4541c-7ac3-4c90-936b-9937ad31c86f"
                }
              }
            ]
          },
          {
            "name": "Create next one-click payment",
            "item": [
              {
                "name": "Get recurring by first recurring id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_recurring_one_click_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "11f786fc-381d-4e66-be6f-4d8fb64d5e81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    pm.expect(response.recurring_data.id).to.equal(pm.collectionVariables.get('last_recurring_one_click_id'));",
                        "    ",
                        "    pm.expect(response.recurring_data).to.have.property('filing');",
                        "    pm.expect(response.recurring_data.filing).to.have.property('id');",
                        "    ",
                        "    pm.collectionVariables.set('last_filing_id', response.recurring_data.filing.id);",
                        "    ",
                        "    postman.setNextRequest('Create next one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "1a70ddd4-3d57-4d77-a63a-a7504a4a17b2"
                    }
                  }
                ],
                "id": "48efc365-1f0f-4e22-b250-e611d82bd66f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{last_recurring_one_click_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{last_recurring_one_click_id}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Create next one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var uuid = require('uuid');",
                        "",
                        "pm.expect(pm.collectionVariables.get('last_filing_id')).to.not.be.undefined;",
                        "",
                        "var merchant_order_id = uuid.v4();",
                        "pm.collectionVariables.set('merchant_order_id', merchant_order_id);",
                        "pm.collectionVariables.set('last_merchant_order_id', merchant_order_id);"
                      ],
                      "type": "text/javascript",
                      "id": "ac460958-2ceb-48b1-98d3-624c5c17c876"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    ",
                        "    pm.expect(response.recurring_data).to.have.property('filing');",
                        "    pm.expect(response.recurring_data.filing).to.have.property('id');",
                        "    ",
                        "    pm.expect(response.recurring_data.filing.id).to.equal(pm.collectionVariables.get('last_filing_id'));",
                        "",
                        "    // emulate customer behaviour, performing GET request to redirect url",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    postman.setNextRequest('Get recurring by merchant order id');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "11346c71-8220-4a06-8f44-4f2af3722ddc"
                    }
                  }
                ],
                "id": "63332ffa-16bc-4e1f-bf56-e990daf5a738",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{merchant_order_id}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"filing\": {\n            \"id\": \"{{last_filing_id}}\"\n        }\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "8baff04a-bb1e-4e28-8e6f-74508f28fe53",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings**, to create new one-click payment (with 'initiator'='cit', filing.id from previous one-click in request) \n* Upon authentication completion, one-click payment is processed. Customer gets payment result page (redirect URL)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "a83c135c-01f6-4522-88ff-0a0409e91d95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "c41c2bc5-63db-4aa1-a3af-25c27fc2e16d"
                }
              }
            ]
          },
          {
            "name": "Get recurring payments list",
            "item": [
              {
                "name": "Get recurring by merchant order id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_merchant_order_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "8d1e1ae4-33a9-47ca-862a-e05d05e35378"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.collectionVariables.set('last_recurring_id', response.data[0].recurring_data.id);",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "caed047b-7076-44fb-b12a-2fe5d7e7de1a"
                    }
                  }
                ],
                "id": "75d2acbf-6837-4f7d-8cf1-807917653f2f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/?request_id={{$guid}}&merchant_order_id={{last_merchant_order_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "merchant_order_id",
                        "value": "{{last_merchant_order_id}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get recurrings information",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "6b4031b1-03a4-40d0-8143-20e9de17dbdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('data');",
                        "    pm.expect(response).to.have.property('has_more');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "5409455c-d6be-4ec3-b254-00e26aa46ceb"
                    }
                  }
                ],
                "id": "42ee25ee-6a75-4191-b8a5-42f4db1fae0c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/?request_id={{$guid}}&max_count=5&currency={{TERMINAL_CURRENCY}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "max_count",
                        "value": "5"
                      },
                      {
                        "key": "currency",
                        "value": "{{TERMINAL_CURRENCY}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "9a8eace6-3abf-4b64-9ba9-e0476852fe94",
            "description": "* Merchant makes GET request in JSON format to endpoint **/api/recurrings** to get information about payments list, [see more](https://integration.unlimint.com/#getRecurrings)\n* Merchant receives GET response about transactions (recurrings list)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "a9df04f0-2004-4f61-b13d-38898eaef220"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "a52d809f-a866-43ef-a9af-698311aef109"
                }
              }
            ]
          },
          {
            "name": "Get recurring payment by recurring id",
            "item": [
              {
                "name": "Get recurring by recurring id",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('last_recurring_id')).to.not.be.undefined;"
                      ],
                      "type": "text/javascript",
                      "id": "38cc9f85-9028-4f3c-8380-289e6445d78c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "    pm.expect(response.recurring_data.id).to.equal(pm.collectionVariables.get('last_recurring_one_click_id'));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "672f9e5c-5fcf-4144-8a22-55874b43170b"
                    }
                  }
                ],
                "id": "00c1a390-447a-4557-8663-11ef242b8d56",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{last_recurring_one_click_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{last_recurring_one_click_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "9a007542-bd86-4a87-80e2-83acb871c441",
            "description": "* Merchant makes GET request in JSON format to endpoint **/api/recurrings/{recurring_id}** to get information about one-click payment by recurring id, [see more](https://integration.unlimint.com/#getRecurring)\n* Merchant receives GET response about transaction result information",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "942865da-244c-4b24-b162-6f4de62dc828"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "21e8f799-7ceb-4387-80d6-e4d92e7c9592"
                }
              }
            ]
          },
          {
            "name": "Create pre-authorized one-click payment",
            "item": [
              {
                "name": "Create pre-authorized one-click payment to complete",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "c6f302e4-f929-4c41-a1b3-d9f2edf029dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.collectionVariables.set('recurring_one_click_id_to_complete', response.recurring_data.id);",
                        "    postman.setNextRequest('Complete pre-authorized one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "c64b086f-127a-420b-b5ed-8887db6c9381"
                    }
                  }
                ],
                "id": "ea8478dc-82cf-4a2b-af69-2c0215f141a1",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Complete pre-authorized one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('recurring_one_click_id_to_complete')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "1b04ebd3-99e9-461c-af4c-3414972802c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('status');",
                        "    pm.expect(response.recurring_data.status).to.equal('COMPLETED');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "afbcfe2c-56d8-479e-89b6-cdb8d86a6da0"
                    }
                  }
                ],
                "id": "6076b896-d511-408c-a303-62d9d78a6631",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"recurring_data\": {\n    \"status_to\": \"COMPLETE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{recurring_one_click_id_to_complete}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{recurring_one_click_id_to_complete}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "b0395574-4ec2-4f9a-898c-ca914fb99e1f",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** to create new one-click payment with parameter preauth='true', [see more](https://integration.unlimint.com/#createRecurring)\n* Pre-authorized one-click payment is created in the system and redirect URL is returned to Merchant in JSON format\n* Merchant redirects Customer to the payment page with provided URL\n* Merchant can complete or reverse (void) pre-authorized one-click payment using PATCH request in JSON format with payment id and recurring_data.status_to='REVERSE' or \"COMPLETE\" to **/api/recurrings/{recurring_id}**\n* Merchant receives response with update one-click payment result information (status=\"VOIDED\" or \"COMPLETED\")\n* If merchant doesn't send complete or reverse request ([see more](https://integration.unlimint.com/#updateRecurring)), one-click payment will be completed automatically in 7 calendar days\n* Amount in completion update request can be less, equal or more than preauthorized amount in first request",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "8106993f-acbb-46a9-a889-955f53c65674"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "08c3f1d1-90ba-42cd-9a06-abaaa49d8237"
                }
              }
            ]
          },
          {
            "name": "Reverse one-click payment (void)",
            "item": [
              {
                "name": "Create pre-authorized one-click payment to reverse",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "bfc9ebef-d3eb-4bc3-bdaf-37ef83512243"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('redirect_url');",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('id');",
                        "",
                        "    pm.sendRequest(response.redirect_url, (err, res) => {",
                        "        pm.response.to.have.status(200);",
                        "    });",
                        "    ",
                        "    pm.collectionVariables.set('recurring_one_click_id_to_reverse', response.recurring_data.id);",
                        "    postman.setNextRequest('Reverse pre-authorized one-click payment');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "02ca1014-67ac-4f6d-b3e1-1a6102709207"
                    }
                  }
                ],
                "id": "7ba19668-081a-4764-bf6d-612827b9eccc",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"merchant_order\": {\n        \"id\": \"{{$randomUUID}}\",\n        \"description\": \"Postman Collection Order ('{{request_name}}')\"\n    },\n    \"payment_method\": \"BANKCARD\",\n    \"recurring_data\": {\n        \"initiator\": \"cit\",\n        \"amount\": \"12.34\",\n        \"currency\": \"{{TERMINAL_CURRENCY}}\",\n        \"note\": \"{{$randomCatchPhrase}}\",\n        \"preauth\": true\n    },\n    \"customer\": {\n        \"id\": \"{{customer_id}}\",\n        \"email\": \"{{CUSTOMER_EMAIL}}\",\n        \"phone\": \"{{$randomPhoneNumber}}\"\n    },\n    \"card_account\": {\n        \"card\": {\n            \"pan\": \"{{CARD_NON3DS_CONFIRMED}}\",\n            \"holder\": \"{{$randomFullName}}\",\n            \"expiration\": \"{{expiration}}\",\n            \"security_code\": \"100\"\n        }\n    }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Reverse pre-authorized one-click payment",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('recurring_one_click_id_to_reverse')).to.not.be.undefined;",
                        "",
                        "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                        "",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "e39562bc-1e5f-42ed-bd62-e1e9fd9185b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok",
                        "    pm.response.to.have.jsonBody()",
                        "",
                        "    var response = pm.response.json();",
                        "",
                        "    pm.expect(response).to.have.property('recurring_data');",
                        "    pm.expect(response.recurring_data).to.have.property('status');",
                        "    pm.expect(response.recurring_data.status).to.equal('VOIDED');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "38e373b2-ca70-49ea-98ab-2d470649f089"
                    }
                  }
                ],
                "id": "abd75e83-38c5-47d0-a00b-dd93b69e390a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"request\": {\n    \"id\": \"{{$guid}}\",\n    \"time\": \"{{request_time}}\"\n  },\n  \"operation\": \"CHANGE_STATUS\",\n  \"recurring_data\": {\n    \"status_to\": \"REVERSE\"\n  }\n}"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/recurrings/{{recurring_one_click_id_to_reverse}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "recurrings",
                      "{{recurring_one_click_id_to_reverse}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "9fdb0e69-97e7-40a7-a979-f3daba6999e4",
            "description": "* Merchant makes POST request in JSON format to endpoint **/api/recurrings** to create new one-click payment, [see more](https://integration.unlimint.com/#createRecurring)\n* Merchant receives callback with transaction result information (with recurring id)\n* Merchant makes PATCH request in JSON format with recurring id and recurring_data.status_to='REVERSE' to **/api/recurrings{recurring_id}** to reverse (void) one-click payment, [see more](https://integration.unlimint.com/#updateRecurring)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "23fbebf3-bb1d-4c92-8ff1-c749f14d3e9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "fbd66f89-0adb-436a-a4e4-f0b64981a20c"
                }
              }
            ]
          }
        ],
        "id": "6d73faf0-92b3-4de4-8895-904de8408861",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var moment = require('moment');",
                "pm.variables.set(\"request_time\", moment().toISOString());",
                "",
                "var terminal_code = pm.environment.get('GATEWAY_POSTPONED_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_POSTPONED_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ],
              "id": "380806e6-cf61-4810-ac28-1137fa8a370b"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "b62fc149-ae9a-4b06-b37f-e6c8f6d3c873"
            }
          }
        ]
      },
      {
        "name": "Limits",
        "item": [
          {
            "name": "Get limits for refunds and payouts",
            "item": [
              {
                "name": "Get limits for refunds and payouts",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "aedabcce-11d1-45a4-85cc-194d25a649de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    ",
                        "    var response = pm.response.json();",
                        "        ",
                        "    pm.expect(response).to.have.property('remaining_limits');",
                        "    pm.expect(response.remaining_limits).to.have.property(pm.environment.get(\"TERMINAL_CURRENCY\"));",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "37d3b638-1341-4e10-9cea-ed197433e851"
                    }
                  }
                ],
                "id": "1179b036-116c-4708-9597-49539806d687",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/limits/?request_id={{$guid}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "limits",
                      ""
                    ],
                    "query": [
                      {
                        "key": "request_id",
                        "value": "{{$guid}}"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "a61204f1-ee95-421d-92eb-d96fd43d1c21",
            "description": "* Merchant makes GET request in JSON format to endpoint (/api/limits) to get available refunds and payouts limits, [see more](https://integration.unlimint.com/#limits)\n* Available withdrawal balance for refunds and payouts by all the currencies linked to the terminal_code from merchant authorization context.\n* When NULL for specific currency is returned - withdrawal balance for this currency is disabled\n* When 0 for specific currency is returned - remaining withdrawal balance for this currency is 0\n* Service returns previous limits value (cache value with life time - 1 second) in case when from one merchant was received more than 1 GET request per 1 second. Only successfully authorized merchant can make this kind of request.",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "c12ab5eb-9add-40c2-a62c-f9237c3a4602"
                }
              },
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "id": "0bd9e9fa-798b-4bf8-b4fe-316bb90adcd6"
                }
              }
            ]
          }
        ],
        "id": "af6cbcaf-cdcb-47cc-8247-9988a5745ce3",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                "var password = pm.environment.get('GATEWAY_PASSWORD');",
                "",
                "var tokens = eval(pm.collectionVariables.get('tokens'));",
                "tokens.obtain(terminal_code, password);"
              ],
              "id": "6041cac0-9086-40b2-8da5-da1b092b6f36"
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "id": "d9c98208-8c8e-4232-a1a5-b4b278b560ce"
            }
          }
        ]
      },
      {
        "name": "Reports",
        "item": [
          {
            "name": "Get reports",
            "item": [
              {
                "name": "Initiate the reports’ preparation",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "pm.variables.set(\"request_time\", new Date());",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);"
                      ],
                      "type": "text/javascript",
                      "id": "a7025d28-923a-4a63-84f1-a97bae6797b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.have.jsonBody();",
                        "    var response = pm.response.json();",
                        "    pm.expect(response).to.have.property('sample_id');",
                        "    pm.collectionVariables.set('reports_sample_id', response.sample_id);",
                        "    postman.setNextRequest('Get a list of reports');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "0fcd1b6d-2700-44a0-ad90-9ade88da6fc2"
                    }
                  }
                ],
                "id": "12c0dcac-0451-457c-ba04-719fe70de271",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"request\": {\n        \"id\": \"{{$guid}}\",\n        \"time\": \"{{request_time}}\"\n    },\n    \"reports_data\": {\n        \"start_date\": \"2022-03-01\",\n        \"end_date\": \"2022-03-07\",\n        \"report_type\": [\"regular_settlement\",\"icpp_settlement\"]\n    }\n}\n\n"
                  },
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Get a list of reports",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('reports_sample_id')).to.not.be.undefined;",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "8471460e-9ea5-4c38-9c18-56474556ac33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "    pm.response.to.have.jsonBody();",
                        "    var response = pm.response.json();",
                        "    pm.collectionVariables.set('reports_sample_id', response.sample_id);",
                        "    postman.setNextRequest('Download report file');",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "3bb3c294-0d95-43d5-ae8a-b429ab034b9b"
                    }
                  }
                ],
                "id": "5682360c-5799-42a1-8f88-d51294881692",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports/{{reports_sample_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports",
                      "{{reports_sample_id}}"
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "Download report file",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "exec": [
                        "pm.expect(pm.collectionVariables.get('reports_sample_id')).to.not.be.undefined;",
                        "var terminal_code = pm.environment.get('GATEWAY_TERMINAL_CODE');",
                        "var password = pm.environment.get('GATEWAY_PASSWORD');",
                        "var tokens = eval(pm.collectionVariables.get('tokens'));",
                        "tokens.obtain(terminal_code, password);",
                        "",
                        ""
                      ],
                      "type": "text/javascript",
                      "id": "849eb8c8-8715-47dd-afdc-0d2395f392dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Successful request\", function () {",
                        "    pm.response.to.be.ok;",
                        "});"
                      ],
                      "type": "text/javascript",
                      "id": "f956c45d-fb7b-4150-8806-f72bd68beddb"
                    }
                  }
                ],
                "id": "42679f8a-d156-43c8-88fa-366e204e2147",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "key": "0",
                        "value": {
                          "key": "token",
                          "type": "string",
                          "value": "{{access_token}}"
                        },
                        "type": "any"
                      },
                      {
                        "key": "token",
                        "value": "{{access_token}}",
                        "type": "string"
                      }
                    ]
                  },
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "name": "Content-Type",
                      "type": "text",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/octet-stream",
                      "type": "text"
                    }
                  ],
                  "url": {
                    "raw": "{{UNLIMINT_API_URL}}/api/reports/download/{{reports_sample_id}}",
                    "host": [
                      "{{UNLIMINT_API_URL}}"
                    ],
                    "path": [
                      "api",
                      "reports",
                      "download",
                      "{{reports_sample_id}}"
                    ]
                  }
                },
                "response": []
              }
            ],
            "id": "d409c8ad-81f3-404a-b020-bafda61553d0",
            "description": "*   Merchant makes POST request in JSON format to endpoint (/api/reports) to initiate preparation of reports files\n*   Only successfully authorized merchant can make this kind of request\n*   If files of reports according to POST request's parameters are not found, then the empty array is returned in response to POST request\n*   Merchant makes GET request in JSON format to endpoint (/api/reports/{sample_id}) to get a list of reports with links to files' downloading\n*   Merchant makes GET request in JSON format to endpoint (/api/reports/download/{id}) to download files of report’s\n*   All report files (in archive) or single report file can be downloaded\n*   To download report file the request header 'Accept' must be set to 'application/octet-stream'"
          }
        ],
        "id": "fd09d877-69f4-48e5-8014-21c78281a62a"
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "dbf83e27-d1f9-40a4-92f2-b8cfe39fe8fe",
          "type": "text/javascript",
          "exec": [
            "var moment = require('moment');",
            "",
            "pm.variables.set('request_name', pm.info.requestName);",
            "pm.variables.set('expiration', moment().add(1, 'year').format('MM/YYYY'));",
            "pm.variables.set('customer_id', \"{{$randomUserName}}\");",
            "",
            "pm.collectionVariables.set('tokens', '(' + function () {",
            "    return {",
            "        obtain: function (terminal_code, password) {",
            "            var unlimint_api_url = pm.environment.get('UNLIMINT_API_URL');",
            "",
            "            pm.sendRequest({",
            "                url: `${unlimint_api_url}/api/auth/token`,",
            "                method: 'POST',",
            "                header: 'Content-Type:application/x-www-form-urlencoded',",
            "                body: {",
            "                    mode: 'raw',",
            "                    raw: `grant_type=password&terminal_code=${terminal_code}&password=${password}`",
            "                }",
            "",
            "            }, (err, res) => {",
            "                if (err || res.code !== 200) {",
            "                    throw new Error('Authentication Error');",
            "                }",
            "",
            "                var response = res.json();",
            "                pm.variables.set('access_token', response.access_token);",
            "            });",
            "        }",
            "    }",
            "} + ')();');"
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "18be3d46-3d8f-421f-9c1d-e35333d0fa84",
          "type": "text/javascript",
          "exec": [
            ""
          ]
        }
      }
    ]
  }
}
